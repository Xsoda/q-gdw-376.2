<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluent</name>
    </assembly>
    <members>
        <member name="T:Fluent.RibbonTabItem">
            <summary>
            Represents ribbon tab item
            </summary>
        </member>
        <member name="T:Fluent.IKeyTipedControl">
            <summary>
            Base interface for controls supports key tips
            </summary>
        </member>
        <member name="M:Fluent.IKeyTipedControl.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsMinimizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMinimized.  
            This enables animation, styling, binding, etc...
            </summary>  
        </member>
        <member name="F:Fluent.RibbonTabItem.IsOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen.  
            This enables animation, styling, binding, etc...
            </summary>  
        </member>
        <member name="F:Fluent.RibbonTabItem.IsContextualProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsContextual.  
            This enables animation, styling, binding, etc...
            </summary>  
        </member>
        <member name="F:Fluent.RibbonTabItem.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.  
            This enables animation, styling, binding, etc...
            </summary>  
        </member>
        <member name="F:Fluent.RibbonTabItem.IndentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsSeparatorVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSeparatorVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.GroupProperty">
            <summary>
            Using a DependencyProperty as the backing store for Group.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HasLeftGroupBorderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HaseLeftGroupBorder.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HasRightGroupBorderProperty">
            <summary>
            Using a DependencyProperty as the backing store for HaseLeftGroupBorder.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnFocusableChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles IsEnabled changes
            </summary>
            <param name="d"></param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.CoerceFocusable(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces IsEnabled 
            </summary>
            <param name="d"></param>
            <param name="basevalue"></param>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>The size of the control, up to the maximum specified by constraint.</returns>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnApplyTemplate">
            <summary>
            On new style applying
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDownÂ routed event is raised 
            on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles selected
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            handles unselected
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.GroupsContainer">
            <summary>
            Gets ribbon groups container
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsOpen">
            <summary>
            Gets or sets whether ribbon is opened
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.ReduceOrder">
            <summary>
            Gets or sets reduce order
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsContextual">
            <summary>
            Gets or sets whether tab item is contextual
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsSelected">
            <summary>
            Gets or sets whether tab item is selected
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.TabControlParent">
            <summary>
            Gets ribbon tab control parent
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Indent">
            <summary>
            Gets or sets indent
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsSeparatorVisible">
            <summary>
            Gets or sets whether separator is visible
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Group">
            <summary>
            Gets or sets ribbon contextual tab group
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.DesiredWidth">
            <summary>
            Gets or sets desired width of the tab item
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.HasLeftGroupBorder">
            <summary>
            Gets or sets whether tab item has left group border
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.HasRightGroupBorder">
            <summary>
            Gets or sets whether tab item has right group border
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Groups">
            <summary>
            get collection of ribbon groups
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Header">
            <summary>
            Gets or sets header of tab item
            </summary>
        </member>
        <member name="T:Fluent.KeyTipAdorner">
            <summary>
            Represents adorner for KeyTips. 
            KeyTipAdorners is chained to produce one from another. 
            Detaching root adorner couses detaching all adorners in the chain
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.#ctor(System.Windows.UIElement,System.Windows.UIElement,Fluent.KeyTipAdorner)">
            <summary>
            Construcotor
            </summary>
            <param name="adornedElement"></param>
            <param name="parentAdorner">Parent adorner or null</param>
            <param name="keyTipElementContainer">The element which is container for elements</param>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Attach">
            <summary>
            Attaches this adorner to the adorned element
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Detach">
            <summary>
            Detaches this adorner from the adorned element
            </summary> 
        </member>
        <member name="M:Fluent.KeyTipAdorner.Terminate">
            <summary>
            Terminate whole key tip's adorner chain
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Forward(System.String,System.Boolean)">
            <summary>
            Forwards to the elements with the given keys
            </summary>
            <param name="keys">Keys</param>
            <param name="click">If true the element will be clicked</param>
            <returns>If the element will be found the function will return true</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.TryGetElement(System.String)">
            <summary>
            Gets element keytipped by keys
            </summary>
            <param name="keys"></param>
            <returns>Element</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.IsElementsStartWith(System.String)">
            <summary>
            Is one of the elements starts with the given chars
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines
            a size for the control
            </summary>
            <param name="finalSize">The final area within the parent 
            that this element should use to arrange 
            itself and its children</param>
            <returns>The actual size used</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures KeyTips
            </summary>
            <param name="constraint">The available size that this element can give to child elements.</param>
            <returns>The size that the groups container determines it needs during 
            layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.GetGroupBox(System.Windows.DependencyObject)">
            <summary>
            Gets parent RibbonGroupBox or null
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.GetVisualChild(System.Int32)">
            <summary>
            Returns a child at the specified index from a collection of child elements
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection</param>
            <returns>The requested child element</returns>
        </member>
        <member name="E:Fluent.KeyTipAdorner.Terminated">
            <summary>
            This event is occured when adorner is 
            detached and is not able to be attached again
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.IsAdornerChainAlive">
            <summary>
            Determines whether at least one on the adorners in the chain is alive
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.VisualChildrenCount">
            <summary>
            Gets visual children count
            </summary>
        </member>
        <member name="T:Fluent.InRibbonGallery">
            <summary>
            Represents the In-Ribbon Gallery, a gallery-based control that exposes 
            a default subset of items directly in the Ribbon. Any remaining items 
            are displayed when a drop-down menu button is clicked
            </summary>
        </member>
        <member name="T:Fluent.IScalableRibbonControl">
            <summary>
            Repesents scalable ribbon contol
            </summary>
        </member>
        <member name="M:Fluent.IScalableRibbonControl.Enlarge">
            <summary>
            Enlarge control size
            </summary>
        </member>
        <member name="M:Fluent.IScalableRibbonControl.Reduce">
            <summary>
            Reduce control size
            </summary>
        </member>
        <member name="E:Fluent.IScalableRibbonControl.Scaled">
            <summary>
            Occurs when contol is scaled
            </summary>
        </member>
        <member name="T:Fluent.IDropDownControl">
            <summary>
            Represents control that have drop down popup
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether control context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether drop down is opened
            </summary>
        </member>
        <member name="T:Fluent.IRibbonControl">
            <summary>
            Base interface for Fluent controls
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="T:Fluent.IQuickAccessItemProvider">
            <summary>
            This interface must be implemented for controls
            which are intended to insert to quick access toolbar
            </summary>
        </member>
        <member name="M:Fluent.IQuickAccessItemProvider.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="P:Fluent.IQuickAccessItemProvider.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.IQuickAccessItemProvider.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MinItemsInDropDownRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinItemsInDropDownRow.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxItemsInDropDownRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxItemsInDropDownRow.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ItemWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ItemHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.GroupByProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupBy.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilter. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterTitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilterTitle. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterGroupsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilterGroups. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.HasFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasFilter.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for Selectable.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ResizeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.CanCollapseToButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanCollapseToButton.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.IsCollapsedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCollapsed.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MenuProperty">
            <summary>
            Using a DependencyProperty as the backing store for Menu.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxItemsInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MinItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxItemsInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxDropDownHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxDropDownHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application 
            code or internal processes call ApplyTemplate
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Handles size property changing
            </summary>
            <param name="previous">Previous value</param>
            <param name="current">Current value</param>
        </member>
        <member name="M:Fluent.InRibbonGallery.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.InRibbonGallery.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when the <see cref="E:System.Windows.UIElement.KeyDown"/> event is received.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:Fluent.InRibbonGallery.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.InRibbonGallery.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.Enlarge">
            <summary>
            Enlarge control size
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.Reduce">
            <summary>
            Reduce control size
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MinItemsInDropDownRow">
            <summary>
            Min width of the Gallery 
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxItemsInDropDownRow">
            <summary>
            Max width of the Gallery 
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ItemWidth">
            <summary>
            Gets or sets item width
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ItemHeight">
            <summary>
            Gets or sets item height
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.GroupBy">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Orientation">
            <summary>
            Gets or sets orientation of gallery
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Filters">
            <summary>
            Gets collection of filters
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilter">
            <summary>
            Gets or sets selected filter
            </summary>               
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilterTitle">
            <summary>
            Gets selected filter title
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilterGroups">
            <summary>
            Gets selected filter groups
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.HasFilter">
            <summary>
            Gets whether gallery has selected filter
            </summary>       
        </member>
        <member name="P:Fluent.InRibbonGallery.Selectable">
            <summary>
            Gets or sets whether gallery items can be selected
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsDropDownOpen">
            <summary>
            Gets or sets whether popup is opened
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.CanCollapseToButton">
            <summary>
            Gets or sets whether InRibbonGallery
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsCollapsed">
            <summary>
            Gets whether InRibbonGallery is collapsed to button
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.LargeIcon">
            <summary>
            Button large icon
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsSnapped">
            <summary>
            Snaps / Unsnaps the Visual 
            (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Menu">
            <summary>
            Gets or sets menu to show in combo box bottom
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxItemsInRow">
            <summary>
            Gets or sets max count of items in row
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MinItemsInRow">
            <summary>
            Gets or sets min count of items in row
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="E:Fluent.InRibbonGallery.Scaled">
            <summary>
            Occurs when control is scaled
            </summary>
        </member>
        <member name="E:Fluent.InRibbonGallery.DropDownOpened">
            <summary>
            Occurs when context menu is opened
            </summary>
        </member>
        <member name="E:Fluent.InRibbonGallery.DropDownClosed">
            <summary>
            Occurs when context menu is closed
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.RibbonControlSize">
            <summary>
            Represents logical sizes of a ribbon control 
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Large">
            <summary>
            Large size of a control
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Middle">
            <summary>
            Middle size of a control
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Small">
            <summary>
            Small size of a control
            </summary>
        </member>
        <member name="T:Fluent.RibbonTabsContainer">
            <summary>
            Represent panel with ribbon tab items.
            It is automatically adjusting size of tabs
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all of the RibbonGroupBox, and resize them appropriately
            to fit within the available room
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that the groups container determines it needs during 
            layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines
            a size for the control
            </summary>
            <param name="finalSize">The final area within the parent 
            that this element should use to arrange 
            itself and its children</param>
            <returns>The actual size used</returns>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.UpdateSeparators(System.Boolean,System.Boolean)">
            <summary>
            Updates separator visibility
            </summary>
            <param name="regularTabs">If this parameter true, regular tabs will have separators</param>
            <param name="contextualTabs">If this parameter true, contextual tabs will have separators</param>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a System.Windows.Media.Visual object is visible.
            This is optimized for horizontal scrolling only
            </summary>
            <param name="visual">A System.Windows.Media.Visual that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A System.Windows.Rect that is visible.</returns>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelLeft">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelRight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageLeft">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageRight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.SetVerticalOffset(System.Double)">
            <summary>
            Not implemented
            </summary>
            <param name="offset"></param>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ScrollOwner">
            <summary>
            Gets or sets a System.Windows.Controls.ScrollViewer element that controls scrolling behavior.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ExtentHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.VerticalOffset">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ViewportHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:Fluent.ScrollData">
            <summary>
            Helper class to hold scrolling data.
            This class exists to reduce working set when SCP is delegating to another implementation of ISI.
            Standard "extra pointer always for less data sometimes" cache savings model:
            </summary>
        </member>
        <member name="F:Fluent.ScrollData.ScrollOwner">
            <summary>
            Scroll viewer
            </summary>
        </member>
        <member name="F:Fluent.ScrollData.OffsetX">
            <summary>
            Scroll offset
            </summary>
        </member>
        <member name="F:Fluent.ScrollData.ViewportWidth">
            <summary>
            ViewportSize is computed from our FinalSize, but may be in different units.
            </summary>
        </member>
        <member name="F:Fluent.ScrollData.ExtentWidth">
            <summary>
            Extent is the total size of our content.
            </summary>
        </member>
        <member name="T:Fluent.DropDownButton">
            <summary>
            Represents drop down button
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.HasTriangleProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasTriangle. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.ResizeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeMode.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.MaxDropDownHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxDropDownHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.DropDownButton.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.DropDownButton.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown routed event 
            reaches an element in its route that is derived from this class. Implement this method to add 
            class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.DropDownButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown"/> routed event that occurs when the user presses a key.
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.UIElement.KeyDown"/> event.</param>
        </member>
        <member name="M:Fluent.DropDownButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be synchronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.DropDownButton.OnQuickAccessOpened(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu opened
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.DropDownButton.OnQuickAccessMenuClosed(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.DropDownButton.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overridden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="F:Fluent.DropDownButton.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.LargeIcon">
            <summary>
            Gets or sets button large icon
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.HasTriangle">
            <summary>
            Gets or sets whether button has triangle
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.IsDropDownOpen">
            <summary>
            Gets or sets whether popup is opened
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="E:Fluent.DropDownButton.DropDownOpened">
            <summary>
            Occurs when context menu is opened
            </summary>
        </member>
        <member name="E:Fluent.DropDownButton.DropDownClosed">
            <summary>
            Occurs when context menu is closed
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.Spinner">
            <summary>
            Represents spinner control
            </summary>
        </member>
        <member name="T:Fluent.RibbonControl">
            <summary>
            Represent base class for Fluent controls
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.SetAppropriateSize(System.Windows.UIElement,Fluent.RibbonGroupBoxState)">
            <summary>
            Sets appropriate size of the control according to the 
            given group box state and control's size definition
            </summary>
            <param name="element">UI Element</param>
            <param name="state">Group box state</param>
        </member>
        <member name="M:Fluent.RibbonControl.GetThreeSizeDefinition(System.Windows.UIElement)">
            <summary>
            Gets value of the attached property SizeDefinition of the given element
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="F:Fluent.RibbonControl.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.CommandProperty">
            <summary>
            Identifies the routed Command dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonControl.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget dependency property.
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles Command changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.RibbonControl.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles Command CanExecute changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.RibbonControl.ExecuteCommand">
            <summary>
            Execute command
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.CanExecuteCommand">
            <summary>
            Determines whether the Command can be executed
            </summary>
            <returns>Returns Command CanExecute</returns>
        </member>
        <member name="M:Fluent.RibbonControl.CoerceIsEnabled(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces IsEnabled 
            </summary>
            <param name="d"></param>
            <param name="basevalue"></param>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.RibbonControl.BindQuickAccessItem(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Binds default properties of control to quick access element
            </summary>
            <param name="element">Toolbar item</param>
            <param name="source">Source item</param>
        </member>
        <member name="F:Fluent.RibbonControl.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnCanAddToQuickAccessToolbarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs then CanAddToQuickAccessToolBar property changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Fluent.RibbonControl.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.Bind(System.Object,System.Windows.FrameworkElement,System.String,System.Windows.DependencyProperty,System.Windows.Data.BindingMode)">
            <summary>
            Binds elements property
            </summary>
            <param name="source">Source element</param>
            <param name="target">Target element</param>
            <param name="path">Property path</param>
            <param name="property">Property to bind</param>
            <param name="mode">Binding mode</param>
        </member>
        <member name="M:Fluent.RibbonControl.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Handles size property changing
            </summary>
            <param name="previous">Previous value</param>
            <param name="current">Current value</param>
        </member>
        <member name="P:Fluent.RibbonControl.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.Header">
            <summary>
            Gets or sets element header
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.Command">
            <summary>
            Gets or sets the command to invoke when this button is pressed. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the System.Windows.Controls.Primitives.ButtonBase.Command property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.CommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.IsEnabledCore">
            <summary>
            Gets a value that becomes the return 
            value of IsEnabled in derived classes. 
            </summary>
            <returns>
            true if the element is enabled; otherwise, false.
            </returns>
        </member>
        <member name="P:Fluent.RibbonControl.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="F:Fluent.Spinner.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.IncrementProperty">
            <summary>
            Using a DependencyProperty as the backing store for Increment.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.MinimumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Minimum.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.MaximumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Maximum.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.FormatProperty">
            <summary>
            Using a DependencyProperty as the backing store for Format.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.DelayProperty">
            <summary>
            Using a DependencyProperty as the backing store for Delay.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.IntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interval.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Spinner.InputWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for InputWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Spinner.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Spinner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Spinner.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.Spinner.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.Spinner.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUpï¿½attached event reaches 
            an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.Spinner.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.Spinner.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overriden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="E:Fluent.Spinner.ValueChanged">
            <summary>
            Occurs when value has been changed
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Value">
            <summary>
            Gets or sets current value
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Minimum">
            <summary>
            Gets or sets minimun value
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Maximum">
            <summary>
            Gets or sets maximum value
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Format">
            <summary>
            Gets or sets string format of value
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Delay">
            <summary>
            Gets or sets the amount of time, in milliseconds, 
            the Spinner waits while it is pressed before it starts repeating. 
            The value must be non-negative. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds, 
            between repeats once repeating starts. The value must be non-negative. 
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.Spinner.InputWidth">
            <summary>
            Gets or sets width of the value input part of spinner
            </summary>               
        </member>
        <member name="T:Fluent.StatusBar">
            <summary>
            Represents ribbon status bar
            </summary>
        </member>
        <member name="F:Fluent.StatusBar.IsWindowMaximizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWindowMaximized.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.StatusBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="M:Fluent.StatusBar.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="P:Fluent.StatusBar.IsWindowMaximized">
            <summary>
            Gets or sets whether window is maximized
            </summary>
        </member>
        <member name="T:Fluent.ContextMenuResizeMode">
            <summary>
            Represents context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.None">
            <summary>
            Context menu can not be resized
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.Vertical">
            <summary>
            Context menu can be only resized vertically
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.Both">
            <summary>
            Context menu can be resized vertically and horizontally
            </summary>
        </member>
        <member name="T:Fluent.ContextMenu">
            <summary>
            Represents a pop-up menu that enables a control 
            to expose functionality that is specific to the context of the control
            </summary>
        </member>
        <member name="F:Fluent.ContextMenu.ResizeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeMode. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ContextMenu.#cctor">
            <summary>
            Static constructor
            </summary>]
        </member>
        <member name="M:Fluent.ContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.ContextMenu.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.ContextMenu.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.ContextMenu.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="P:Fluent.ContextMenu.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="T:Fluent.ComboBox">
            <summary>
            Represents custom Fluent UI ComboBox
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.MenuProperty">
            <summary>
            Using a DependencyProperty as the backing store for Menu.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.InputWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for InputWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.ItemHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.GroupByProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupBy. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.ResizeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.ComboBox.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.OnDropDownOpened(System.EventArgs)">
            <summary>
            Reports when a combo box's popup opens. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened"/> event.</param>
        </member>
        <member name="M:Fluent.ComboBox.OnDropDownClosed(System.EventArgs)">
            <summary>
            Reports when a combo box's popup closes. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ComboBox.DropDownClosed"/> event.</param>
        </member>
        <member name="M:Fluent.ComboBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when a <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown"/> attached routed event occurs.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Fluent.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when a <see cref="E:System.Windows.Input.Keyboard.KeyDown"/> attached routed event occurs.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Fluent.ComboBox.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.Menu">
            <summary>
            Gets or sets menu to show in combo box bottom
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.InputWidth">
            <summary>
            Gets or sets width of the value input part of combobox
            </summary>               
        </member>
        <member name="P:Fluent.ComboBox.ItemHeight">
            <summary>
            Gets or sets items height
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.GroupBy">
            <summary>
            Gets or sets name of property which
            will use to group items in the ComboBox.
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.IsSnapped">
            <summary>
            Snaps / Unsnaps the Visual 
            (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.BackstageTabControl">
            <summary>
            Represents Backstage tab control.
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentProperty">
            <summary>
            Dependency property SelectedContent
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnInitialized(System.EventArgs)">
            <summary>
            Raises the System.Windows.FrameworkElement.Initialized event. 
            This method is invoked whenever System.Windows.FrameworkElement.
            IsInitialized is set to true internally.
            </summary>
            <param name="e">The System.Windows.RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabControl.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.BackstageTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the current selection when an item in the System.Windows.Controls.Primitives.Selector has changed
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseLeftButtonDownÂ routed event 
            is raised on this element. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed</param>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContent">
            <summary>
            Gets content for selected tab
            </summary>
        </member>
        <member name="T:Fluent.ApplicationMenuRightContentExtractorConverter">
            <summary>
            Extracts right content presenter of application menu converter
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenuRightContentExtractorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Fluent.ApplicationMenuRightContentExtractorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Fluent.ApplicationMenu">
            <summary>
            Represents backstage button
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.RightPaneWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for RightContentWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.RightPaneContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for RightContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.FooterPaneContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for BottomContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="P:Fluent.ApplicationMenu.RightPaneWidth">
            <summary>
            Gets or sets width of right content
            </summary>
        </member>
        <member name="P:Fluent.ApplicationMenu.RightPaneContent">
            <summary>
            Gets or sets application menu right pane content
            </summary>
        </member>
        <member name="P:Fluent.ApplicationMenu.FooterPaneContent">
            <summary>
            Gets or sets application menu bottom pane content
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBarRow">
            <summary>
            Represents size definition for group box
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBarRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarRow.Children">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="T:Fluent.RibbonLocalization">
            <summary>
            Contains localizable Ribbon's properties. 
            Set Culture property to change current Ribbon localization or 
            set properties independently to use your localization
            </summary>
        </member>
        <member name="M:Fluent.RibbonLocalization.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Fluent.RibbonLocalization.PropertyChanged">
            <summary>
            Occurs then property is changed
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.Culture">
            <summary>
            Gets or sets current culture used for localization
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.BackstageButtonText">
            <summary>
            Gets or sets text of backstage button
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.BackstageButtonKeyTip">
            <summary>
            Gets or sets KeyTip of backstage button
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.MinimizeButtonScreenTipTitle">
            <summary>
            Minimize Button ScreenTip Title
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.MinimizeButtonScreenTipText">
            <summary>
            Minimize Button ScreenTip Text
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.ExpandButtonScreenTipTitle">
            <summary>
            Expand Button ScreenTip Title
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.ExpandButtonScreenTipText">
            <summary>
            Expand Button ScreenTip Text
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.QuickAccessToolBarDropDownButtonTooltip">
            <summary>
            Quick Access ToolBar DropDown Button ToolTip
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.QuickAccessToolBarMoreControlsButtonTooltip">
            <summary>
            Quick Access ToolBar MoreControls Button ToolTip
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.QuickAccessToolBarMenuHeader">
            <summary>
            Quick Access ToolBar  Menu Header
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.QuickAccessToolBarMenuShowBelow">
            <summary>
            Quick Access ToolBar Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.QuickAccessToolBarMenuShowAbove">
            <summary>
            Quick Access ToolBar Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuAddItem">
            <summary>
            Quick Access ToolBar Menu Add Item
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuAddGroup">
            <summary>
            Quick Access ToolBar Menu Add Group
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuAddGallery">
            <summary>
            Quick Access ToolBar Menu Add Gallery
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuAddMenu">
            <summary>
            Quick Access ToolBar Menu Add Menu
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuRemoveItem">
            <summary>
            Quick Access ToolBar Menu Remove Item
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuCustomizeQuickAccessToolBar">
            <summary>
            Ribbon Context Menu Customize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuCustomizeRibbon">
            <summary>
            Ribbon Context Menu Customize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuMinimizeRibbon">
            <summary>
            Ribbon Context Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuShowBelow">
            <summary>
            Ribbon Context Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.RibbonContextMenuShowAbove">
            <summary>
            Ribbon Context Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.ScreenTipDisableReasonHeader">
            <summary>
            Gets or sets ScreenTip's disable reason header
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.CustomizeStatusBar">
            <summary>
            Gets or sets customize Status Bar
            </summary>
        </member>
        <member name="T:Fluent.TextBox">
            <summary>
            Represents custom Fluent UI TextBox
            </summary>
        </member>
        <member name="F:Fluent.TextBox.InputWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for InputWidth.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Content.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.IsReadOnlyProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsReadonly.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.CharacterCasingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CharacterCasing.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.MaxLengthProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxLength. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.TextAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextAlignment.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.TextDecorationsProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextDecorations.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.IsUndoEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsUndoEnabled.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.UndoLimitProperty">
            <summary>
            Using a DependencyProperty as the backing store for UndoLimit.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.AutoWordSelectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoWordSelection.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.SelectionBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectionBrush.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.SelectionOpacityProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectionOpacity.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.TextBox.CaretBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for CaretBrush.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.TextBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.TextBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.TextBox.AppendText(System.String)">
            <summary>
            Appends text
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:Fluent.TextBox.Copy">
            <summary>
            Copies selected content to the clipboard
            </summary>
        </member>
        <member name="M:Fluent.TextBox.Cut">
            <summary>
            Cuts selected content to the clipboard
            </summary>
        </member>
        <member name="M:Fluent.TextBox.Paste">
            <summary>
            Pastes content from the clipboard
            </summary>
        </member>
        <member name="M:Fluent.TextBox.Undo">
            <summary>
            Undoes the most recent undo command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.TextBox.Redo">
            <summary>
            Redoes the most recent undo command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.TextBox.SelectAll">
            <summary>
            Selects all the contents
            </summary>
        </member>
        <member name="M:Fluent.TextBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects contents
            </summary>
            <param name="start">Start</param>
            <param name="length">Length</param>
        </member>
        <member name="M:Fluent.TextBox.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever 
            application code or internal processes call ApplyTemplate
            </summary>
        </member>
        <member name="M:Fluent.TextBox.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.TextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUpï¿½attached event reaches 
            an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.TextBox.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.TextBox.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overridden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="E:Fluent.TextBox.TextChanged">
            <summary>
            Occurs when text is changed
            </summary>
        </member>
        <member name="E:Fluent.TextBox.SelectionChanged">
            <summary>
            Occurs when selection changed
            </summary>
        </member>
        <member name="P:Fluent.TextBox.InputWidth">
            <summary>
            Gets or sets width of the value input part of textbox
            </summary>               
        </member>
        <member name="P:Fluent.TextBox.Text">
            <summary>
            Gets or sets text content of the textbox
            </summary>
        </member>
        <member name="P:Fluent.TextBox.IsReadOnly">
            <summary>
            Gets or sets whether text can be edited. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.TextBox.CharacterCasing">
            <summary>
            Gets or sets how characters are cased
            </summary>
        </member>
        <member name="P:Fluent.TextBox.MaxLength">
            <summary>
            Gets or sets how many characters can be entered manually into the textbox
            </summary>
        </member>
        <member name="P:Fluent.TextBox.TextAlignment">
            <summary>
            Gets or sets horizontal text alignment of the content
            </summary>
        </member>
        <member name="P:Fluent.TextBox.TextDecorations">
            <summary>
            Gets or sets the text decorations to apply to the text box
            </summary>
        </member>
        <member name="P:Fluent.TextBox.IsUndoEnabled">
            <summary>
            Gets or sets a value that indicates whether undo support is enabled
            </summary>
        </member>
        <member name="P:Fluent.TextBox.UndoLimit">
            <summary>
            Gets or sets the number of actions stored in undo queue
            </summary>
        </member>
        <member name="P:Fluent.TextBox.AutoWordSelection">
            <summary>
            Gets or sets whether auto word selection feature is enabled
            </summary>
        </member>
        <member name="P:Fluent.TextBox.SelectionBrush">
            <summary>
            Gets or sets the brush that highlights the selected text
            </summary>
        </member>
        <member name="P:Fluent.TextBox.SelectionOpacity">
            <summary>
            Gets or sets opacity of the selection brush
            </summary>
        </member>
        <member name="P:Fluent.TextBox.CaretBrush">
            <summary>
            Gets or sets the caret brush that is used 
            to paint the caret of the text box
            </summary>
        </member>
        <member name="P:Fluent.TextBox.SelectionStart">
            <summary>
            Gets or sets character index of the beginning of the current selection
            </summary>
        </member>
        <member name="P:Fluent.TextBox.SelectionLength">
            <summary>
            Gets or sets a value that indicating the number of characters in the current selection
            </summary>
        </member>
        <member name="P:Fluent.TextBox.SelectedText">
            <summary>
            Gets or sets content of the selection
            </summary>
        </member>
        <member name="P:Fluent.TextBox.CanUndo">
            <summary>
            Gets a value that indicating whether actions can be undo
            </summary>
        </member>
        <member name="P:Fluent.TextBox.CanRedo">
            <summary>
            Gets a value that indicating whether actions can be redo
            </summary>
        </member>
        <member name="T:Fluent.StatusBarItem">
            <summary>
            Represents ribbon status bar item
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.TitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for Title.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.IsCheckedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsChecked.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.StatusBarItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Fluent.StatusBarItem.Title">
            <summary>
            Gets or sets ribbon status bar item
            </summary>
        </member>
        <member name="P:Fluent.StatusBarItem.Value">
            <summary>
            Gets or sets ribbon status bar value
            </summary>
        </member>
        <member name="P:Fluent.StatusBarItem.IsChecked">
            <summary>
            Gets or sets whether status bar item is checked in menu
            </summary>
        </member>
        <member name="E:Fluent.StatusBarItem.Checked">
            <summary>
            Occurs when status bar item checks
            </summary>
        </member>
        <member name="E:Fluent.StatusBarItem.Unchecked">
            <summary>
            Occurs when status bar item unchecks
            </summary>
        </member>
        <member name="T:Fluent.RibbonGroupsContainer">
            <summary>
            Represent panel with ribbon group.
            It is automatically adjusting size of controls
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupsContainer.ReduceOrderProperty">
            <summary>
            Using a DependencyProperty as the backing store for ReduceOrder.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.CreateUIElementCollection(System.Windows.FrameworkElement)">
            <summary>
              Returns a collection of the panel's UIElements.
            </summary>
            <param name="logicalParent">The logical parent of the collection to be created.</param>
            <returns>Returns an ordered collection of elements that have the specified logical parent.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all of the RibbonGroupBox, and resize them appropriately
            to fit within the available room
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that the groups container determines it needs during 
            layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines 
            a size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a System.Windows.Media.Visual object is visible.
            This is optimized for horizontal scrolling only
            </summary>
            <param name="visual">A System.Windows.Media.Visual that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A System.Windows.Rect that is visible.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelLeft">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelRight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageLeft">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageRight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.SetVerticalOffset(System.Double)">
            <summary>
            Not implemented
            </summary>
            <param name="offset"></param>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ReduceOrder">
            <summary>
            Gets or sets reduce order of group in the ribbon panel.
            It must be enumerated with comma from the first to reduce to 
            the last to reduce (use Control.Name as group name in the enum). 
            Enclose in parentheses as (Control.Name) to reduce/enlarge 
            scalable elements in the given group
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ScrollOwner">
            <summary>
            Gets or sets a System.Windows.Controls.ScrollViewer element that controls scrolling behavior.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ExtentHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.VerticalOffset">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ViewportHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:Fluent.GalleryItemPlaceholder">
            <summary>
            Represents internal class to use it in 
            GalleryPanel as placeholder for GalleryItems
            </summary>
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.MeasureCore(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout 
            required for child elements and determines a size for the derived class. 
            </summary>
            <returns>
            The size that this element determines it needs during layout, 
            based on its calculations of child element sizes.
            </returns>
            <param name="availableSize">The available size that this element can 
            give to child elements. Infinity can be specified as a value to 
            indicate that the element will size to whatever content is available.</param>
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.ArrangeCore(System.Windows.Rect)">
            <summary>
            Defines the template for WPF core-level arrange layout definition. 
            </summary>
            <param name="finalRect">
            The final area within the parent that element should use to 
            arrange itself and its child elements.</param>
        </member>
        <member name="P:Fluent.GalleryItemPlaceholder.Target">
            <summary>
            Gets the target of the placeholder
            </summary>
        </member>
        <member name="T:Fluent.ColorGalleryMode">
            <summary>
            Represents color gallery modes
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.HighlightColors">
            <summary>
            Color gallery displays only fixed highlight colors
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.StandardColors">
            <summary>
            Color gallery displays only fixed standart colors
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.ThemeColors">
            <summary>
            Color gallery displays theme colors
            </summary>
        </member>
        <member name="T:Fluent.ColorGradientItemTemplateSelector">
            <summary>
            Date template selector for gradients
            </summary>
        </member>
        <member name="M:Fluent.ColorGradientItemTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate"/> based on custom logic.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"/> or null. The default value is null.
            </returns>
            <param name="item">The data object for which to select the template.</param><param name="container">The data-bound object.</param>
        </member>
        <member name="T:Fluent.MoreColorsExecutingEventArgs">
            <summary>
            More colors event args
            </summary>
        </member>
        <member name="P:Fluent.MoreColorsExecutingEventArgs.Color">
            <summary>
            Gets or sets choosed color
            </summary>
        </member>
        <member name="P:Fluent.MoreColorsExecutingEventArgs.Canceled">
            <summary>
            Gets or sets a value indicating whether more colors is canceled
            </summary>
        </member>
        <member name="T:Fluent.ColorGallery">
            <summary>
            Represents color gallery
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.HighlightColors">
            <summary>
            Hightlight colors array
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardColors">
            <summary>
            Standard colors array
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardThemeColors">
            <summary>
            Standard colors array in ThemeColor mode
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Mode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ChipWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ChipWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ChipHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ChipHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsAutomaticColorButtonVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsAutomaticColorButtonVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsNoColorButtonVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsNoColorButtonVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsMoreColorsButtonVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMoreColorsButtonVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsRecentColorsVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsRecentColorsVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ColumnsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Columns.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardColorGridRowsProperty">
            <summary>
            Using a DependencyProperty as the backing store for StandardColorGridRows.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeColorGridRowsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ThemeColorGridRows.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.SelectedColorProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeColorsSourceProperty">
            <summary>
            Using a DependencyProperty as the backing store for ThemeColorsSource.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeGradientsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ThemeGradients.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardGradientsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ThemeGradients.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.SelectedColorChangedEvent">
            <summary>
            Identifies the SelectedColorChanged routed event.
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.RaiseSelectedColorChanged">
            <summary>
            Raises SelectedColorChanged event
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.GetBrightness(System.Windows.Media.Color)">
            <summary>
            Returns brightness of the given color from 0..1
            </summary>
            <param name="color">Color</param>
            <returns>Brightness of the given color from 0..1</returns>
        </member>
        <member name="M:Fluent.ColorGallery.GetGradient(System.Windows.Media.Color,System.Int32)">
            <summary>
            Makes gradient colors from lighter to darker
            </summary>
            <param name="color">Base color</param>
            <param name="count">Count of items in the gradient</param>
            <returns>Colors from lighter to darker</returns>
        </member>
        <member name="P:Fluent.ColorGallery.RecentColors">
            <summary>
            Gets recent colors collection
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.Mode">
            <summary>
            Gets or sets color gallery mode
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ChipWidth">
            <summary>
            Gets or sets chip width
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ChipHeight">
            <summary>
            Gets or sets chip height
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsAutomaticColorButtonVisible">
            <summary>
            Gets or sets a value indicating whether Automatic button is visible
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsNoColorButtonVisible">
            <summary>
            Gets or sets a value indicating whether No color button is visible
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsMoreColorsButtonVisible">
            <summary>
            Gets or sets a value indicating whether More Colors button is visible
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsRecentColorsVisible">
            <summary>
            Gets or set a value indicating whether recent colors group displayed. Work only when Mode is ThemeColors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.Columns">
            <summary>
            Gets or sets number of color gallery columns. It works only when Mode is ThemeColors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.StandardColorGridRows">
            <summary>
            Gets or set number of standard color rows. Work only when Mode is ThemeColors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColorGridRows">
            <summary>
            Gets or set number of theme color rows. Work only when Mode is ThemeColors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.SelectedColor">
            <summary>
            Gets or sets selected color
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColors">
            <summary>
            Gets collection of theme colors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColorsSource">
            <summary>
            Gets or sets theme colors source
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeGradients">
            <summary>
            Gets theme gradients collection
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.StandardGradients">
            <summary>
            Gets standart gradients collection
            </summary>
        </member>
        <member name="E:Fluent.ColorGallery.SelectedColorChanged">
            <summary>
            Occurs when selection color is changed
            </summary>
        </member>
        <member name="E:Fluent.ColorGallery.MoreColorsExecuting">
            <summary>
            Occurs whether more colors menu item is clicked
            </summary>
        </member>
        <member name="T:Fluent.ScreenTip">
            <summary>
            ScreenTips display the name of the control, 
            the keyboard shortcut for the control, and a brief description 
            of how to use the control. ScreenTips also can provide F1 support, 
            which opens help and takes the user directly to the related 
            help topic for the control whose ScreenTip was 
            displayed when the F1 button was pressed
            </summary>
        </member>
        <member name="M:Fluent.ScreenTip.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ScreenTip.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.TitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for Title. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.DisableReasonProperty">
            <summary>
            Using a DependencyProperty as the backing store for DisableReason. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.HelpTopicProperty">
            <summary>
            Using a DependencyProperty as the backing store for HelpTopic.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.ImageProperty">
            <summary>
            Using a DependencyProperty as the backing store for Image.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.IsRibbonAlignedProperty">
            <summary>
            Using a DependencyProperty as the backing store for BelowRibbon.  
            This enables animation, styling, binding, etc...
            </summary> 
        </member>
        <member name="P:Fluent.ScreenTip.Title">
            <summary>
            Gets or sets title of the screen tip
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.Text">
            <summary>
            Gets or sets text of the screen tip
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.DisableReason">
            <summary>
            Gets or sets disable reason of the associated screen tip's control
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.HelpTopic">
            <summary>
            Gets or sets help topic of the ScreenTip
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.Image">
            <summary>
            Gets or sets image of the screen tip
            </summary>
        </member>
        <member name="E:Fluent.ScreenTip.HelpPressed">
            <summary>
            Occurs when user press F1 on ScreenTip with HelpTopic filled
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.IsRibbonAligned">
            <summary>
            Gets or set whether ScreenTip should positioned below Ribbon
            </summary>
        </member>
        <member name="T:Fluent.ScreenTipHelpEventArgs">
            <summary>
            Event args for HelpPressed event handler
            </summary>
        </member>
        <member name="M:Fluent.ScreenTipHelpEventArgs.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="helpTopic">Help topic</param>
        </member>
        <member name="P:Fluent.ScreenTipHelpEventArgs.HelpTopic">
            <summary>
            Gets help topic associated with screen tip
            </summary>
        </member>
        <member name="T:Fluent.MenuItem">
            <summary>
            Represents menu item
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.DescriptionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Description.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.IsDefinitiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDefinitive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.ResizeModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeMode.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.MaxDropDownHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxDropDownHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.IsSplitedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSplited.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.MenuItem.OnQuickAccessOpened(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu opened
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.MenuItem.OnQuickAccessMenuClosed(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Fluent.MenuItem.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.MenuItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.MenuItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is released. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event.</param>
        </member>
        <member name="M:Fluent.MenuItem.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button"/> is clicked. 
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.OnApplyTemplate">
            <summary>
            Called when the template's tree is generated.
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Fluent.MenuItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown"/> event. 
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.UIElement.KeyDown"/> event.</param>
        </member>
        <member name="M:Fluent.MenuItem.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Handles size property changing
            </summary>
            <param name="previous">Previous value</param>
            <param name="current">Current value</param>
        </member>
        <member name="P:Fluent.MenuItem.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.Description">
            <summary>
            Useless property only used in secon level application menu items
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.IsDropDownOpen">
            <summary>
            Gets or sets whether popup is opened
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.IsSplited">
            <summary>
            Gets or sets a value indicating whether menu item is splited
            </summary>
        </member>
        <member name="E:Fluent.MenuItem.DropDownOpened">
            <summary>
            Occurs when context menu is opened
            </summary>
        </member>
        <member name="E:Fluent.MenuItem.DropDownClosed">
            <summary>
            Occurs when context menu is closed
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.KeyTipService">
            <summary>
            Handles Alt, F10 and so on
            </summary>
        </member>
        <member name="M:Fluent.KeyTipService.#ctor(Fluent.Ribbon)">
            <summary>
            Default constrctor
            </summary>
            <param name="ribbon">Host element</param>
        </member>
        <member name="M:Fluent.KeyTipService.Attach">
            <summary>
            Attaches self
            </summary>
        </member>
        <member name="M:Fluent.KeyTipService.Detach">
            <summary>
            Detachs self
            </summary>
        </member>
        <member name="M:Fluent.KeyTipService.GetElementWindow(System.Windows.UIElement)">
            <summary>
            Gets window where element is loacated or null
            </summary>
            <param name="element">Elemet</param>
            <returns>Window where element is loacated or null</returns>
        </member>
        <member name="T:Fluent.ToolTipService">
            <summary>
            Represents additional toltip functionality
            </summary>
        </member>
        <member name="M:Fluent.ToolTipService.Attach(System.Type)">
            <summary>
            Attach ooltip properties to control
            </summary>
            <param name="type">Control type</param>
        </member>
        <member name="T:Fluent.SplitButton">
            <summary>
            Represents button control that allows 
            you to add menu and handle clicks
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CommandProperty">
            <summary>
            Identifies the routed Command dependency property.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget dependency property.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.GroupNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupName.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsCheckedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsChecked.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsCheckableProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsChecked.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.DropDownToolTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for DropDownToolTip.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsButtonEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDropDownEnabled.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsDefinitiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDefinitive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.ClickEvent">
            <summary>
            Occurs when user clicks
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CheckedEvent">
            <summary>
            Occurs when button is checked
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.UncheckedEvent">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="M:Fluent.SplitButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.SplitButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked 
            whenever application code or internal processes call ApplyTemplate
            </summary>
        </member>
        <member name="M:Fluent.SplitButton.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown routed event 
            reaches an element in its route that is derived from this class. Implement this method to add 
            class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.SplitButton.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be synchronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.SplitButton.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overridden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="F:Fluent.SplitButton.CanAddButtonToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddButtonToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.Command">
            <summary>
            Gets or sets the command to invoke when this button is pressed. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the System.Windows.Controls.Primitives.ButtonBase.Command property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.CommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.GroupName">
            <summary>
            Gets or sets the name of the group that the toggle button belongs to. 
            Use the GroupName property to specify a grouping of toggle buttons to 
            create a mutually exclusive set of controls. You can use the GroupName 
            property when only one selection is possible from a list of available 
            options. When this property is set, only one ToggleButton in the specified
            group can be selected at a time.
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether SplitButton is checked
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.IsCheckable">
            <summary>
            Gets or sets a value indicating whether SplitButton can be checked
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.DropDownToolTip">
            <summary>
            Gets or sets tooltip of dropdown part of split button
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.IsButtonEnabled">
            <summary>
            Gets or sets a value indicating whether dropdown part of split button is enabled
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Click">
            <summary>
            Occurs when user clicks
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Checked">
            <summary>
            Occurs when button is checked
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Unchecked">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.CanAddButtonToQuickAccessToolBar">
            <summary>
            Gets or sets whether button can be added to quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.MenuPanel">
            <summary>
            Represents panel for menu items an over stuff
            </summary>
        </member>
        <member name="M:Fluent.MenuPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.MenuPanel.UpdateMenuSizes">
            <summary>
            Updates menu sizes
            </summary>
        </member>
        <member name="M:Fluent.MenuPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when the VisualCollection of a visual object is modified.
            </summary>
            <param name="visualAdded">The Visual that was added to the collection</param>
            <param name="visualRemoved">The Visual that was removed from the collection</param>
        </member>
        <member name="M:Fluent.MenuPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout 
            required for child elements and determines a size for the System.Windows.FrameworkElement-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value 
            to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Fluent.MenuPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and 
            determines a size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element
            should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Fluent.MenuPanel.ResizeMinWidth">
            <summary>
            Gets or sets minimal width for resizing menu panel
            </summary>
        </member>
        <member name="P:Fluent.MenuPanel.ResizeMinHeight">
            <summary>
            Gets or sets minimal height for resizing menu panel
            </summary>
        </member>
        <member name="T:Fluent.Ribbon">
            <summary>
            Represents the main Ribbon control which consists of multiple tabs, each of which
            containing groups of controls.  The Ribbon also provides improved context
            menus, enhanced screen tips, and keyboard shortcuts.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.MinimalVisibleWidth">
            <summary>
            Minimal width of ribbon parent window
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.MinimalVisibleHeight">
            <summary>
            Minimal height of ribbon parent window
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening"/> routed event reaches this class in its route. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Fluent.Ribbon.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing"/> routed event reaches this class in its route. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">Provides data about the event.</param>
        </member>
        <member name="F:Fluent.Ribbon.MenuProperty">
            <summary>
            Using a DependencyProperty as the backing store for Button. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.TitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for Title.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SelectedTabItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedTabItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SelectedTabIndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedTabindex.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessToolBarAboveRibbonProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAboveRibbon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnShowQuickAccesToolBarAboveRibbonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles ShowQuickAccessToolBarAboveRibbon property changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.Ribbon.OnGroupsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of contextual tab groups ghanges
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.Ribbon.OnTabsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of ribbon tabs changed
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.Ribbon.OnToolbarItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of toolbar items changes
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.Ribbon.OnQuickAccessItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of quick access menu items changes
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="F:Fluent.Ribbon.CanCustomizeQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanCustomizeQuickAccessToolBar.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanCustomizeRibbonProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanCustomizeRibbon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsMinimizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMinimized. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsCollapsedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCollapsed.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsQuickAccessToolBarVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsQuickAccessToolBarVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanQuickAccessLocationChangingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanQuickAccessLocationChanging.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.AddToQuickAccessCommand">
            <summary>
            Gets add to quick access toolbar command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.RemoveFromQuickAccessCommand">
            <summary>
            Gets remove from quick access command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessAboveCommand">
            <summary>
            Gets show quick access above command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessBelowCommand">
            <summary>
            Gets show quick access below command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ToggleMinimizeTheRibbonCommand">
            <summary>
            Gets toggle ribbon minimize command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CustomizeQuickAccessToolbarCommand">
            <summary>
            Gets customize quick access toolbar command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CustomizeTheRibbonCommand">
            <summary>
            Gets customize the ribbon command
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled System.Windows.UIElement.GotFocus 
            event reaches this element in its route.
            </summary>
            <param name="e">The System.Windows.RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.Ribbon.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.IsInQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Determines whether the given element is in quick access toolbar
            </summary>
            <param name="element">Element</param>
            <returns>True if element in quick access toolbar</returns>
        </member>
        <member name="M:Fluent.Ribbon.AddToQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Adds the given element to quick access toolbar
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:Fluent.Ribbon.RemoveFromQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Removes the given elements from quick access toolbar
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:Fluent.Ribbon.ClearQuickAccessToolBar">
            <summary>
            Clears quick access toolbar
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.GetAdornerLayer(System.Windows.UIElement)">
            <summary>
            Get adorner layer for element
            </summary>
            <param name="element">Element</param>
            <returns>Adorner layer</returns>
        </member>
        <member name="M:Fluent.Ribbon.ResetState">
            <summary>
            Resets automatically saved state
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.SaveState(System.IO.Stream)">
            <summary>
            Saves state to the given stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:Fluent.Ribbon.LoadState(System.IO.Stream)">
            <summary>
            Loads state from the given stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="F:Fluent.Ribbon.AutomaticStateManagementProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutomaticStateManagement. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Localization">
            <summary>
            Gets localizable properties
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.RibbonContextMenu">
            <summary>
            Context menu for ribbon in current thread
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.SelectedTabChanged">
            <summary>
            Occurs when selected tab has been changed (be aware that SelectedTab can be null)
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.CustomizeTheRibbon">
            <summary>
            Occurs when customize the ribbon
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.CustomizeQuickAccessToolbar">
            <summary>
            Occurs when customize quick access toolbar
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.IsMinimizedChanged">
            <summary>
            Occurs when IsMinimized property is changing
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.IsCollapsedChanged">
            <summary>
            Occurs when IsCollapsed property is changing
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Menu">
            <summary>
            Gets or sets file menu control (can be application menu button, backstage button and so on)
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Title">
            <summary>
            Window title
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.SelectedTabItem">
            <summary>
            Gets or sets selected tab item
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.SelectedTabIndex">
            <summary>
            Gets or sets selected tab index
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.TitleBar">
            <summary>
            Gets ribbon titlebar
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.ShowQuickAccessToolBarAboveRibbon">
            <summary>
            Gets or sets whether quick access toolbar showes above ribbon
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.ContextualGroups">
            <summary>
            Gets collection of contextual tab groups
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Tabs">
            <summary>
            gets collection of ribbon tabs
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.ToolBarItems">
            <summary>
            Gets collection of toolbar items
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessToolBar">
            <summary>
            Gets quick access toolbar associated with the ribbon
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessItems">
            <summary>
            Gets collection of quick access menu items
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.CanCustomizeQuickAccessToolBar">
            <summary>
            Gets or set whether Customize Quick Access Toolbar menu item is shown
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.CanCustomizeRibbon">
            <summary>
            Gets or set whether Customize Ribbon menu item is shown
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsCollapsed">
            <summary>
            Gets whether ribbon is collapsed
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsQuickAccessToolBarVisible">
            <summary>
            Gets or sets whether QAT is visible
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.CanQuickAccessLocationChanging">
            <summary>
            Gets or sets whether user can change location of QAT
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsolatedStorageFileName">
            <summary>
            Gets name of the isolated storage file
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsStateLoaded">
            <summary>
            Gets or sets whether state is loaded
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.AutomaticStateManagement">
            <summary>
            Gets or sets whether Quick Access ToolBar can 
            save and load its state automatically
            </summary>
        </member>
        <member name="T:Fluent.RibbonScrollViewer">
            <summary>
            Represents ScrollViewer with modified hit test
            </summary>
        </member>
        <member name="M:Fluent.RibbonScrollViewer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Performs a hit test to determine whether the specified 
            points are within the bounds of this ScrollViewer
            </summary>
            <returns>The result of the hit test</returns>
            <param name="hitTestParameters">The parameters for hit testing within a visual object</param>
        </member>
        <member name="T:Fluent.GalleryGroupIcon">
            <summary>
            Represents gallery group icon definition
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupIcon.GroupNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupName.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupIcon.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupIcon.GroupName">
            <summary>
            Gets or sets group name
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupIcon.Icon">
            <summary>
            Gets or sets group icon
            </summary>
        </member>
        <member name="T:Fluent.FrameworkHelper">
            <summary>
            Represents class to determine .NET Framework version difference
            </summary>
        </member>
        <member name="F:Fluent.FrameworkHelper.PresentationFrameworkVersion">
            <summary>
            Version of WPF
            </summary>
        </member>
        <member name="M:Fluent.FrameworkHelper.GetUseLayoutRounding(System.Windows.DependencyObject)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Fluent.FrameworkHelper.SetUseLayoutRounding(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Fluent.FrameworkHelper.UseLayoutRoundingProperty">
            <summary>
             Using a DependencyProperty as the backing store for UseLayoutRounding.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Fluent.BackstageAdorner">
            <summary>
            Represents adorner for Backstage
            </summary>
        </member>
        <member name="M:Fluent.BackstageAdorner.#ctor(System.Windows.FrameworkElement,System.Windows.UIElement,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="adornedElement">Adorned element</param>
            <param name="backstage">Backstage</param>
            <param name="topOffset">Adorner offset from top of window</param>
        </member>
        <member name="M:Fluent.BackstageAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines
            a size for the control
            </summary>
            <param name="finalSize">The final area within the parent 
            that this element should use to arrange 
            itself and its children</param>
            <returns>The actual size used</returns>
        </member>
        <member name="M:Fluent.BackstageAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures KeyTips
            </summary>
            <param name="constraint">The available size that this element can give to child elements.</param>
            <returns>The size that the groups container determines it needs during 
            layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Fluent.BackstageAdorner.GetVisualChild(System.Int32)">
            <summary>
            Returns a child at the specified index from a collection of child elements
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection</param>
            <returns>The requested child element</returns>
        </member>
        <member name="P:Fluent.BackstageAdorner.VisualChildrenCount">
            <summary>
            Gets visual children count
            </summary>
        </member>
        <member name="T:Fluent.Backstage">
            <summary>
            Represents backstage button
            </summary>
        </member>
        <member name="F:Fluent.Backstage.IsOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Backstage.ContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for Content.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Backstage.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Backstage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Backstage.GetAdornerLayer(System.Windows.UIElement)">
            <summary>
            Get adorner layer for element
            </summary>
            <param name="element">Element</param>
            <returns>Adorner layer</returns>
        </member>
        <member name="M:Fluent.Backstage.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDownÂ routed event reaches an element 
            in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data.
             The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.Backstage.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.Backstage.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.Backstage.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="P:Fluent.Backstage.IsOpen">
            <summary>
            Gets or sets whether backstage is shown
            </summary>
        </member>
        <member name="P:Fluent.Backstage.Content">
            <summary>
            Gets or sets content of the backstage
            </summary>
        </member>
        <member name="P:Fluent.Backstage.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="T:Fluent.RibbonItemsControl">
            <summary>
            Represents ribbon items control
            </summary>
        </member>
        <member name="F:Fluent.RibbonItemsControl.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonItemsControl.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonItemsControl.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonItemsControl.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonItemsControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonItemsControl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonItemsControl.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.RibbonItemsControl.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonItemsControl.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonItemsControl.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.RibbonItemsControl.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Handles size property changing
            </summary>
            <param name="previous">Previous value</param>
            <param name="current">Current value</param>
        </member>
        <member name="P:Fluent.RibbonItemsControl.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonItemsControl.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.RibbonItemsControl.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.RibbonItemsControl.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonItemsControl.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonItemsControl.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.RadioButton">
            <summary>
            Represents Fluent UI specific RadioButton
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.RadioButton.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.LargeIcon">
            <summary>
            Gets or sets button large icon
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.BackstageTabItem">
            <summary>
            Represents backstage tab item
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabItem.IsSelectedProperty">
            <summary>
            Dependency property for isSelected
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabItem.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the System.Windows.Controls.ContentControl.Content property changes.
            </summary>
            <param name="oldContent">The old value of the System.Windows.Controls.ContentControl.Content property.</param>
            <param name="newContent">The new value of the System.Windows.Controls.ContentControl.Content property.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDownÂ routed event is raised on this element. 
            Implement this method to add class handling for this event.
            </summary>
            <param name="e"> The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles selected event
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles unselected event
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.HandleIsSelectedChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Handles IsSelected changed
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.IsSelected">
            <summary>
            Gets or sets whether the tab is selected
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.TabControlParent">
            <summary>
            Gets parent tab control
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.Header">
            <summary>
            Gets or sets tab items text
            </summary>
        </member>
        <member name="T:Fluent.RibbonTabControl">
            <summary>
            Represents ribbon tab control
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.MenuProperty">
            <summary>
            Using a DependencyProperty as the backing store for Button. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.SelectedContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsMinimizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsMinimized.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDropDownOpen.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnInitialized(System.EventArgs)">
            <summary>
            Raises the System.Windows.FrameworkElement.Initialized event. 
            This method is invoked whenever System.Windows.
            FrameworkElement.IsInitialized is set to true internally.
            </summary>
            <param name="e">The System.Windows.RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.RibbonTabControl.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the current selection when an item in the System.Windows.Controls.Primitives.Selector has changed
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheelÂ 
            attached event reaches an element in its route that is derived from this class. 
            Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseWheelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.RibbonTabControl.CustomPopupPlacementMethod(System.Windows.Size,System.Windows.Size,System.Windows.Point)">
            <summary>
            Implements custom placement for ribbon popup
            </summary>
            <param name="popupsize"></param>
            <param name="targetsize"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:Fluent.RibbonTabControl.Menu">
            <summary>
            Gets or sets file menu control (can be application menu button, backstage button and so on)
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.SelectedContent">
            <summary>
            Gets content of selected tab item
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsDropDownOpen">
            <summary>
            Gets or sets whether ribbon popup is opened
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.CanScroll">
            <summary>
            Gets whether ribbon tabs can scroll
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.SelectedTabItem">
            <summary>
            Gets or sets selected tab item
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.ToolBarItems">
            <summary>
            Gets collection of ribbon toolbar items
            </summary>
        </member>
        <member name="T:Fluent.QuickAccessToolBar">
            <summary>
            Represents quick access toolbar
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.HasOverflowItemsProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasOverflowItems.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnQuickAccessItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles quick access menu items chages
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.ShowAboveRibbonProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAboveRibbon.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.CanQuickAccessLocationChangingProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanQuickAccessLocationChanging.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or 
            internal processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnShowBelowClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles show below menu item click
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnShowAboveClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles show above menu item click
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            <returns>The size of the control, up to the maximum specified by constraint</returns>
            <param name="constraint">The maximum size that the method can return</param>
        </member>
        <member name="E:Fluent.QuickAccessToolBar.ItemsChanged">
            <summary>
            Occured when items are added or removed from Quick Access toolbar
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.Items">
            <summary>
            Gets items collection
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.HasOverflowItems">
            <summary>
            Gets whether QuickAccessToolBar has overflow items
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.QuickAccessItems">
            <summary>
            Gets quick access menu items
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.ShowAboveRibbon">
            <summary>
            Gets or sets whether quick access toolbar showes above ribbon
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.LogicalChildren">
            <summary>
            Gets an enumerator to the logical child elements
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.CanQuickAccessLocationChanging">
            <summary>
            Gets or sets whether user can change location of QAT
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBar">
            <summary>
            Represent panel for group box panel
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBar.SeparatorStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for SeparatorStyle.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.GetVisualChild(System.Int32)">
            <summary>
            Overrides System.Windows.Media.Visual.GetVisualChild(System.Int32),
            and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested 
            child element in the collection</param>
            <returns>The requested child element. This should not return null; 
            if the provided index is out of range, an exception is thrown</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.GetCurrentLayoutDefinition">
            <summary>
            Gets current used layout definition (or null if no present definitions)
            </summary>
            <returns>Layout definition or null</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Handles size property changing
            </summary>
            <param name="previous">Previous value</param>
            <param name="current">Current value</param>
        </member>
        <member name="M:Fluent.RibbonToolBar.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all of the RibbonGroupBox, and resize them appropriately
            to fit within the available room
            </summary>
            <param name="availableSize">The available size that 
            this element can give to child elements.</param>
            <returns>The size that the panel determines it needs during 
            layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines 
            a size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this 
            element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.WrapPanelLayuot(System.Windows.Size,System.Boolean)">
            <summary>
            Unified method for wrap panel logic
            </summary>
            <param name="availableSize">Available or final size</param>
            <param name="measure">Pass true if measure required; pass false if arrange required</param>
            <returns>Final size</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.CustomLayout(Fluent.RibbonToolBarLayoutDefinition,System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Layout logic for the given layout definition
            </summary>
            <param name="layoutDefinition">Current layout definition</param>
            <param name="availableSize">Available or final size</param>
            <param name="measure">Pass true if measure required; pass false if arrange required</param>
            <param name="addchildren">Determines whether we have to add children to the logical and visual tree</param>
            <returns>Final size</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="P:Fluent.RibbonToolBar.SeparatorStyle">
            <summary>
            Gets or sets style for the separator
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.Children">
            <summary>
            Gets children
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.LayoutDefinitions">
            <summary>
            Gets particular rules  for layout in this group box panel
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBarControlGroupDefinition">
            <summary>
            Represent logical container for toolbar items
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBarControlGroupDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Fluent.RibbonToolBarControlGroupDefinition.ChildrenChanged">
            <summary>
            Occures when children has been changed
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroupDefinition.Children">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="T:Fluent.GalleryItem">
            <summary>
            Represents gallery item
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.IsPressedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsPressed.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.GroupProperty">
            <summary>
            Using a DependencyProperty as the backing store for Group.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.CommandProperty">
            <summary>
            Identifies the routed Command dependency property.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget dependency property.
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles Command changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.GalleryItem.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles Command CanExecute changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.GalleryItem.ExecuteCommand">
            <summary>
            Execute command
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.CanExecuteCommand">
            <summary>
            Determines whether the Command can be executed
            </summary>
            <returns>Returns Command CanExecute</returns>
        </member>
        <member name="F:Fluent.GalleryItem.ClickEvent">
            <summary>
            Identifies the RibbonControl.Click routed event.
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.RaiseClick">
            <summary>
            Raises click event
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the System.Windows.UIElement.MouseLeftButtonDown routed event that occurs 
            when the left mouse button is pressed while the mouse pointer is over this control.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides class handling for the System.Windows.UIElement.MouseLeftButtonUp routed event that occurs 
            when the left mouse button is released while the mouse pointer is over this control.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.GalleryItem.OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles click event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.GalleryItem.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.IsPressed">
            <summary>
            Gets a value that indicates whether a Button is currently activated. 
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.Group">
            <summary>
            Gets or sets GalleryItem group
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.Command">
            <summary>
            Gets or sets the command to invoke when this button is pressed. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the System.Windows.Controls.Primitives.ButtonBase.Command property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.CommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.IsEnabledCore">
            <summary>
            Gets a value that becomes the return 
            value of IsEnabled in derived classes. 
            </summary>
            <returns>
            true if the element is enabled; otherwise, false.
            </returns>
        </member>
        <member name="E:Fluent.GalleryItem.Click">
            <summary>
            Occurs when a RibbonControl is clicked.
            </summary>
        </member>
        <member name="T:Fluent.Gallery">
            <summary>
            Represents gallery control. 
            Usually a gallery is hosted in context menu
            </summary>
        </member>
        <member name="F:Fluent.Gallery.MinItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinItemsInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.MaxItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaxItemsInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.GroupByProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupBy.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.ItemWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.ItemHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilter. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterTitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilterTitle. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterGroupsProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedFilterGroups. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.HasFilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasFilter.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectableProperty">
            <summary>
            Using a DependencyProperty as the backing store for Selectable.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.IsLastItemPropertyKey">
            <summary>
             Using a DependencyProperty as the backing store for IsLastItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Gallery.IsLastItemProperty">
            <summary>
             Using a DependencyProperty as the backing store for IsLastItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Gallery.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Gallery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Gallery.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.Gallery.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.Gallery.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:Fluent.Gallery.MinItemsInRow">
            <summary>
            Min width of the Gallery 
            </summary>
        </member>
        <member name="P:Fluent.Gallery.MaxItemsInRow">
            <summary>
            Max width of the Gallery 
            </summary>
        </member>
        <member name="P:Fluent.Gallery.GroupBy">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="P:Fluent.Gallery.Orientation">
            <summary>
            Gets or sets orientation of gallery
            </summary>
        </member>
        <member name="P:Fluent.Gallery.ItemWidth">
            <summary>
            Gets or sets item width
            </summary>
        </member>
        <member name="P:Fluent.Gallery.ItemHeight">
            <summary>
            Gets or sets item height
            </summary>
        </member>
        <member name="P:Fluent.Gallery.Filters">
            <summary>
            Gets collection of filters
            </summary>
        </member>
        <member name="P:Fluent.Gallery.SelectedFilter">
            <summary>
            Gets or sets selected filter
            </summary>               
        </member>
        <member name="P:Fluent.Gallery.SelectedFilterTitle">
            <summary>
            Gets selected filter title
            </summary>
        </member>
        <member name="P:Fluent.Gallery.SelectedFilterGroups">
            <summary>
            Gets selected filter groups
            </summary>
        </member>
        <member name="P:Fluent.Gallery.HasFilter">
            <summary>
            Gets whether gallery has selected filter
            </summary>       
        </member>
        <member name="P:Fluent.Gallery.Selectable">
            <summary>
            Gets or sets whether gallery items can be selected
            </summary>
        </member>
        <member name="P:Fluent.Gallery.IsLastItem">
            <summary>
            Gets whether gallery is last item in ItemsControl
            </summary>
        </member>
        <member name="T:Fluent.Button">
            <summary>
            Represents button
            </summary>
        </member>
        <member name="F:Fluent.Button.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.IsDefinitiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDefinitive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Button.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Button.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Button.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button"/> is clicked. 
            </summary>
        </member>
        <member name="M:Fluent.Button.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be synchronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.Button.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.Button.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.Button.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.Button.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.Button.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.Button.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.Button.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.Button.LargeIcon">
            <summary>
            Gets or sets button large icon
            </summary>
        </member>
        <member name="P:Fluent.Button.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="P:Fluent.Button.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.Button.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.QuickAccessMenuItem">
            <summary>
            Peresents quick access shortcut to another control
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessMenuItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessMenuItem.TargetProperty">
            <summary>
            Using a DependencyProperty as the backing store for shortcut. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessMenuItem.Target">
            <summary>
            Gets or sets shortcut to the target control
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessMenuItem.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="T:Fluent.QuickAccessItemsProvider">
            <summary>
            The class responds to mine controls for QuickAccessToolBar
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.IsSupported(System.Windows.UIElement)">
            <summary>
            Determines whether the given control can provide a quick access toolbar item
            </summary>
            <param name="element">Control</param>
            <returns>True if this control is able to provide
            a quick access toolbar item, false otherwise</returns>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.GetQuickAccessItem(System.Windows.UIElement)">
            <summary>
            Gets control which represents quick access toolbar item
            </summary>
            <param name="element">Host control</param>
            <returns>Control which represents quick access toolbar item</returns>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.FindSupportedControl(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Finds the top supported control
            </summary>
            <param name="visual">Visual</param>
            <param name="point">Point</param>
            <returns>Point</returns>
        </member>
        <member name="T:Fluent.RibbonToolBarControlGroup">
            <summary>
            Represent logical container for toolbar items
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlGroup.IsFirstInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsFirstInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlGroup.IsLastInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsFirstInRow.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroup.IsFirstInRow">
            <summary>
            Gets whether the group is the fisrt control in the row
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroup.IsLastInRow">
            <summary>
            Gets whether the group is the last control in the row
            </summary>
        </member>
        <member name="T:Fluent.GalleryGroupFilter">
            <summary>
            Represents gallery group filter definition
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupFilter.TitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for Title.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupFilter.GroupsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ContextualGroups.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupFilter.Title">
            <summary>
            Gets or sets title of filter
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupFilter.Groups">
            <summary>
            Gets or sets list pf groups splitted by comma
            </summary>
        </member>
        <member name="T:Fluent.GroupSeparatorMenuItem">
            <summary>
            Represents group separator menu item
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBarLayoutDefinition">
            <summary>
            Represents size definition for group box
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.RowCountProperty">
            <summary>
            Using a DependencyProperty as the backing store for RowCount.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.RowCount">
            <summary>
            Gets or sets count of rows in the ribbon toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.Rows">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods">
            <summary>
            Native methods
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_ANYCOLOR">
            <summary>
            Causes the dialog box to display all available colors in the set of basic colors. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_ENABLEHOOK">
            <summary>
            Enables the hook procedure specified in the lpfnHook member of this structure. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_ENABLETEMPLATE">
            <summary>
            The hInstance and lpTemplateName members specify a dialog box template to use in place of the default template. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_ENABLETEMPLATEHANDLE">
            <summary>
            The hInstance member identifies a data block that contains a preloaded dialog box template. The system ignores the lpTemplateName member if this flag is specified. This flag is used only to initialize the dialog box.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_FULLOPEN">
            <summary>
            Causes the dialog box to display the additional controls that allow the user to create custom colors. If this flag is not set, the user must click the Define Custom Color button to display the custom color controls.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_PREVENTFULLOPEN">
            <summary>
            Disables the Define Custom Color button.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_RGBINIT">
            <summary>
            Causes the dialog box to use the color specified in the rgbResult member as the initial color selection.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_SHOWHELP">
            <summary>
            Causes the dialog box to display the Help button. The hwndOwner member must specify the window to receive the HELPMSGSTRING registered messages that the dialog box sends when the user clicks the Help button.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CC_SOLIDCOLOR">
            <summary>
            Causes the dialog box to display only solid colors in the set of basic colors. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a 
            command from the Window menu (formerly known as the system 
            or control menu) or when the user chooses the maximize button, 
            minimize button, restore button, or close button.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_GETSYSMENU">
            <summary>
            'Famous' undocumented WM_GETSYSMENU message to display own context menu
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_DWMCOMPOSITIONCHANGED">
            <summary>
            Sent to all top-level windows when Desktop Window Manager (DWM) composition has been enabled or disabled. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases 
            the right mouse button while the cursor is within the nonclient area of 
            a window. This message is posted to the window that contains the cursor. 
            If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SETTINGCHANGE">
            <summary>
            A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the err! bad pv reference "SC_MOVE" [type 'winnotify' not supported.] or err! bad pv reference "SC_SIZE" [type 'winnotify' not supported.] value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the err! bad pv reference "SC_MOV" [type 'winnotify' not supported.]E or err! bad pv reference "SC_SIZE" [type 'winnotify' not supported.] value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WVR_HREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. This value is similar to CS_HREDRAW  class style
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WVR_VREDRAW">
            <summary>
            Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. This value is similar to CS_VREDRAW  class style
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WVR_REDRAW">
            <summary>
            This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MF_ENABLED">
            <summary>
            Enables the menu item so that it can be selected and restores it from its grayed state. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MF_BYCOMMAND">
            <summary>
            Indicates that the uPosition parameter specifies the identifier of the menu item (the default). 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MF_GRAYED">
            <summary>
            Disables the menu item and grays it so that it cannot be selected. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MF_DISABLED">
            <summary>
            Disables the menu item so that it cannot be selected, but this flag does not gray it. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.RGN_AND">
            <summary>
            Creates the intersection of the two combined regions.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.RGN_OR">
            <summary>
            Creates the union of two combined regions.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.RGN_XOR">
            <summary>
            Creates the union of two combined regions except for any overlapping areas.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.RGN_DIFF">
            <summary>
            Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.RGN_COPY">
            <summary>
            Creates a copy of the region identified by hrgnSrc1.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_NORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWNOACTIVATE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SW_FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_SIZE">
            <summary>
            Sizes the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_MOVE">
            <summary>
            Moves the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_MINIMIZE">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_MAXIMIZE">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_NEXTWINDOW">
            <summary>
            Moves to the next window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_PREVWINDOW">
            <summary>
            Moves to the previous window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_CLOSE">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_VSCROLL">
            <summary>
            Scrolls vertically.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_HSCROLL">
            <summary>
            Scrolls horizontally.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_MOUSEMENU">
            <summary>
            Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_KEYMENU">
            <summary>
            Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_ARRANGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_RESTORE">
            <summary>
            Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_TASKLIST">
            <summary>
            Activates the Start menu. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_SCREENSAVE">
            <summary>
            Executes the screen saver application specified in the [boot] section of the System.ini file.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_HOTKEY">
            <summary>
            Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_DEFAULT">
            <summary>
            Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_MONITORPOWER">
            <summary>
            Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer. 
            The lParam parameter can have the following values: 
            -1 - the display is powering on
            1 - the display is going to low power
            2 - the display is being shut off
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SC_CONTEXTHELP">
            <summary>
            Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTCLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTCAPTION">
            <summary>
            In a title bar
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTSYSMENU">
            <summary>
            In a system menu
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTLEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTRIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTTOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTTOPLEFT">
            <summary>
            In the upper-left corner of a window border.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTTOPRIGHT">
            <summary>
            In the upper-right corner of a window border.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTBOTTOM">
            <summary>
            In the lower-horizontal border of a resizable window (the user can click the mouse 
            to resize the window vertically).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTBOTTOMLEFT">
            <summary>
            In the lower-left corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HTBOTTOMRIGHT">
            <summary>
            In the lower-right corner of a border of a resizable window 
            (the user can click the mouse to resize the window diagonally).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor 
            moves, or when a mouse button is pressed or released. If the 
            mouse is not captured, the message is sent to the window beneath 
            the cursor. Otherwise, the message is sent to the window 
            that has captured the mouse.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. 
            The DestroyWindow function sends the WM_NCDESTROY message to the window following the 
            WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated 
            with the window. The WM_NCDESTROY message is sent after the child windows 
            have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client 
            area must be calculated. By processing this message, an application can control the 
            content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of 
            the window is about to change. An application can use this message to override 
            the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WM_MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SIZE_RESTORED">
            <summary>
            The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SIZE_MINIMIZED">
            <summary>
            The window has been minimized.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SIZE_MAXIMIZED">
            <summary>
            The window has been maximized.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the WS_CHILD style
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, 
            when a particular child window receives a WM_PAINT message, 
            the WS_CLIPSIBLINGS style clips all other overlapping child windows 
            out of the region of the child window to be updated. 
            If WS_CLIPSIBLINGS is not specified and child windows overlap, 
            it is possible, when drawing within the client area of a child window, 
            to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window. 
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_BORDER">
            <summary>
            Creates a window that has a thin-line border.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_SYSMENU">
            <summary>
            Creates a window that has a window menu on its title bar. The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_MAXIMIZE">
            <summary>
            Creates a window that is initially maximized.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_EX_LEFT">
            <summary>
            Gives window generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_EX_LTRREADING">
            <summary>
            Displays the window text using left-to-right reading order properties. This is the default. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Places a vertical scroll bar (if present) to the right of the client area. This is the default. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style. For more information, see CreateWindowEx. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.GWL_HWNDPARENT">
            <summary>
            Retrieves a handle to the parent window, if any
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HWND_TOP">
            <summary>
            Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows). 
            This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOMOVE">
            <summary>
            Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_DEFERERASE">
            <summary>
            Prevents generation of the WM_SYNCPAINT message. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_FRAMECHANGED">
            <summary>
            Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOREPOSITION">
            <summary>
            Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_NOZORDER">
            <summary>
            Retains the current Z order (ignores the hWndInsertAfter parameter). 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.SWP_SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="M:Fluent.NativeMethods.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The DefWindowProc function calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure. 
            </summary>
            <param name="hWnd">Handle to the window procedure that received the message. </param>
            <param name="Msg">Specifies the message. </param>
            <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter. </param>
            <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter. </param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.MonitorFromRect(Fluent.NativeMethods.Rect@,System.UInt32)">
            <summary>
            The MonitorFromRect function retrieves a handle to the display monitor that 
            has the largest area of intersection with a specified rectangle.
            </summary>
            <param name="lprc">Pointer to a RECT structure that specifies the rectangle of interest in 
            virtual-screen coordinates</param>
            <param name="dwFlags">Determines the function's return value if the rectangle does not intersect 
            any display monitor</param>
            <returns>
            If the rectangle intersects one or more display monitor rectangles, the return value 
            is an HMONITOR handle to the display monitor that has the largest area of intersection with the rectangle.
            If the rectangle does not intersect a display monitor, the return value depends on the value of dwFlags.
            </returns>
        </member>
        <member name="M:Fluent.NativeMethods.MonitorFromWindow(System.IntPtr,System.UInt32)">
            <summary>
            The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window. 
            </summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>If the window intersects one or more display monitor rectangles, the return value is an HMONITOR handle to the display monitor that has the largest area of intersection with the window. 
            If the window does not intersect a display monitor, the return value depends on the value of dwFlags.
            </returns>
        </member>
        <member name="M:Fluent.NativeMethods.CreateRectRgnIndirect(Fluent.NativeMethods.Rect@)">
            <summary>
            The CreateRectRgnIndirect function creates a rectangular region. 
            </summary>
            <param name="lprc">Pointer to a RECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units. </param>
            <returns>If the function succeeds, the return value is the handle to the region.If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode. 
            </summary>
            <param name="hrgnDest">A handle to a new region with dimensions defined by combining two other regions. (This region must exist before CombineRgn is called.) </param>
            <param name="hrgnSrc1">A handle to the first of two regions to be combined.</param>
            <param name="hrgnSrc2">A handle to the second of two regions to be combined.</param>
            <param name="fnCombineMode">A mode indicating how the two regions will be combined. </param>
            <returns>The return value specifies the type of the resulting region. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetMonitorInfo(System.IntPtr,Fluent.NativeMethods.MonitorInfo)">
            <summary>
            The GetMonitorInfo function retrieves information about a display monitor. 
            </summary>
            <param name="hMonitor">Handle to the display monitor of interest.</param>
            <param name="lpmi">Pointer to a MONITORINFO or MONITORINFOEX structure that receives 
            information about the specified display monitor</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends a message to the message window and waits until the WndProc method has processed the message. 
            </summary>
            <param name="hWnd">Handle to destination window </param>
            <param name="Msg">Message </param>
            <param name="wParam">First message parameter </param>
            <param name="lParam">Second message parameter </param>
            <returns></returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetActiveWindow(System.IntPtr)">
            <summary>
            This function makes the specified top-level window associated with the thread 
            calling this function the active window. 
            </summary>
            <param name="hWnd">Handle to the top-level window to be activated. </param>
            <returns>The handle to the window that was previously active indicates success. 
            NULL indicates failure.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
            The SetForegroundWindow function puts the thread that created the specified window into 
            the foreground and activates the window. Keyboard input is directed to the window, 
            and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. 
            </summary>
            <param name="hWnd">Handle to the window that should be activated and brought to the foreground. </param>
            <returns>TIf the window was brought to the foreground, the return value is nonzero. 
            If the window was not brought to the foreground, the return value is zero.
            </returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetActiveWindow">
            <summary>
            The GetActiveWindow function retrieves the window handle to the active 
            window attached to the calling thread's message queue
            </summary>
            <returns>The return value is the handle to the active window attached to the calling thread's message queue. 
            Otherwise, the return value is NULL. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.DwmDefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area.
            </summary>
            <param name="hwnd">Handle to the window procedure that received the message.</param>
            <param name="msg">Specifies the message.</param>
            <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter. </param>
            <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the msg parameter. </param>
            <param name="plResult">Pointer to an LRESULT value that, when this method returns, receives the result of the hit test.</param>
            <returns>TRUE if DwmDefWindowProc handled the message; otherwise, FALSE. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.DwmGetCompositionTimingInfo(System.IntPtr)">
            <summary>
            Retrieves the current composition timing information.
            </summary>
            <param name="hwnd">The handle to the window for which the composition timing information should be retrieved.</param>
            <returns>A pointer to a DWM_TIMING_INFO structure that, when this function returns successfully, receives the current composition timing information for the window. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,Fluent.NativeMethods.MARGINS)">
            <summary>
            Extends the window frame behind the client area.
            </summary>
            <param name="hWnd">The handle to the window for which the frame is extended into the client area</param>
            <param name="pMargins">The pointer to a MARGINS Structure structure 
            that describes the margins to use when extending the frame into the client area.</param>
        </member>
        <member name="M:Fluent.NativeMethods.DwmIsCompositionEnabled">
            <summary>
            Is DWM enabled
            </summary>
            <returns>Is DWM enabled</returns>
        </member>
        <member name="M:Fluent.NativeMethods.IsDwmEnabled">
            <summary>
            Is DWM enabled
            </summary>
            <returns>Is DWM enabled</returns>
        </member>
        <member name="M:Fluent.NativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>
            The IsWindowVisible function retrieves the visibility state of the specified window. 
            </summary>
            <param name="hwnd">Handle to the window to test. </param>
            <returns>If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.EnableMenuItem(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            The EnableMenuItem function enables, disables, or grays the specified menu item. 
            </summary>
            <param name="hMenu">Handle to the menu.</param>
            <param name="uIDEnableItem">Specifies the menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu. </param>
            <param name="uEnable">Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed. </param>
            <returns>The return value specifies the previous state of the menu item (it is either MF_DISABLED, MF_ENABLED, or MF_GRAYED). If the menu item does not exist, the return value is -1.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The TrackPopupMenuEx function displays a shortcut menu at the specified location and 
            tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.
            </summary>
            <param name="hmenu">Handle to the shortcut menu to be displayed. This handle can be 
            obtained by calling the CreatePopupMenu function to create a new shortcut menu or 
            by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item.</param>
            <param name="fuFlags">Specifies function options</param>
            <param name="x">Horizontal location of the shortcut menu, in screen coordinates.</param>
            <param name="y">Vertical location of the shortcut menu, in screen coordinates</param>
            <param name="hwnd">Handle to the window that owns the shortcut menu. This window receives 
            all messages from the menu. The window does not receive a WM_COMMAND message from the menu 
            until the function returns. If you specify TPM_NONOTIFY in the fuFlags parameter, the 
            function does not send messages to the window identified by hwnd. However, you must still
             pass a window handle in hwnd. It can be any window handle from your application.</param>
            <param name="lptpm">Pointer to a TPMPARAMS structure that specifies an area of the screen 
            the menu should not overlap. This parameter can be NULL.</param>
            <returns>If you specify TPM_RETURNCMD in the fuFlags parameter, the return value is the 
            menu-item identifier of the item that the user selected. If the user cancels the menu 
            without making a selection, or if an error occurs, then the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            The GetSystemMenu function allows the application to access the window menu 
            (also known as the system menu or the control menu) for copying and modifying. 
            </summary>
            <param name="hWnd">Handle to the window that will own a copy of the window menu.</param>
            <param name="bRevert">Specifies the action to be taken. If this parameter is FALSE, 
            GetSystemMenu returns a handle to the copy of the window menu currently in use. 
            The copy is initially identical to the window menu, but it can be modified. 
            If this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. 
            The previous window menu, if any, is destroyed.</param>
            <returns>If the bRevert parameter is FALSE, the return value is a handle to a copy of 
            the window menu. If the bRevert parameter is TRUE, the return value is NULL. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The PostMessage function places (posts) a message in the message queue 
            associated with the thread that created the specified window and returns 
            without waiting for the thread to process the message. 
            </summary>
            <param name="hWnd">Handle to the window whose window procedure is to receive the message.
            The following values have special meanings.</param>
            <param name="Msg">Specifies the message to be posted.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetWindowPlacement(System.IntPtr,Fluent.NativeMethods.WINDOWPLACEMENT)">
            <summary>
            The GetWindowPlacement function retrieves the show state and the restored, minimized, and maximized positions of the specified window. 
            </summary>
            <param name="hwnd">Handle to the window. </param>
            <param name="lpwndpl">Pointer to the WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof( WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly. </param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.LowWord(System.IntPtr)">
            <summary>
            Gets low word of dword
            </summary>
            <param name="value">Dword</param>
            <returns>Low word of dword</returns>
        </member>
        <member name="M:Fluent.NativeMethods.HiWord(System.IntPtr)">
            <summary>
            Gets hi word of dword
            </summary>
            <param name="value">Dword</param>
            <returns>Hi word of dword</returns>
        </member>
        <member name="M:Fluent.NativeMethods.MakeDWord(System.Int32,System.Int32)">
            <summary>
            Created DWORD from two WORDs
            </summary>
            <param name="lo">Low word</param>
            <param name="hi">Hi word</param>
            <returns>Result DWORD</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The SetWindowRgn function sets the window region of a window. 
            The window region determines the area within the window where the system permits drawing. 
            The system does not display any portion of a window that lies outside of the window region 
            </summary>
            <param name="hWnd">Handle to window</param>
            <param name="hRgn">Handle to region</param>
            <param name="bRedraw">Window redraw option</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.NativeMethods.CreateRoundRectRgn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The CreateRoundRectRgn function creates a rectangular region with rounded corners
            </summary>
            <param name="nLeftRect">Specifies the x-coordinate of the upper-left corner of the region in device units.</param>
            <param name="nTopRect">Specifies the y-coordinate of the upper-left corner of the region in device units.</param>
            <param name="nRightRect">Specifies the x-coordinate of the lower-right corner of the region in device units.</param>
            <param name="nBottomRect">Specifies the y-coordinate of the lower-right corner of the region in device units</param>
            <param name="nWidthEllipse">Specifies the width of the ellipse used to create the rounded corners in device units.</param>
            <param name="nHeightEllipse">Specifies the height of the ellipse used to create the rounded corners in device units.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.NativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The CreateRectRgn function creates a rectangular region.
            </summary>
            <param name="nLeftRect"> x-coordinate of upper-left corner</param>
            <param name="nTopRect">y-coordinate of upper-left corner</param>
            <param name="nRightRect">x-coordinate of lower-right corner</param>
            <param name="nBottomRect">y-coordinate of lower-right corner</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, 
            or palette, freeing all system resources associated with the object. After the object 
            is deleted, the specified handle is no longer valid. 
            </summary>
            <param name="hObject">Handle to a logical pen, brush, font, bitmap, region, or palette. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the specified handle is not valid or is currently selected into a DC, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            The GetWindowLong function retrieves information about the specified window. The function also retrieves the 32-bit (long) value at the specified offset into the extra window memory.If you are retrieving a pointer or a handle, this function has been superseded by the GetWindowLongPtr function. (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer</param>
            <returns>If the function succeeds, the return value is the requested 32-bit value. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The SetWindowLong function changes an attribute of the specified window. 
            The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">Specifies the replacement value. </param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. 
            These windows are ordered according to their appearance on the screen. 
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order</param>
            <param name="X">Specifies the new position of the left side of the window, in client coordinates</param>
            <param name="Y">Specifies the new position of the top of the window, in client coordinates</param>
            <param name="cx">Specifies the new width of the window, in pixels</param>
            <param name="cy">Specifies the new height of the window, in pixels</param>
            <param name="uFlags">Specifies the window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Fluent.NativeMethods.EnumChildWindows(System.IntPtr,Fluent.NativeMethods.EnumChildProc,System.IntPtr)">
            <summary>
            The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.
            </summary>
            <param name="hWndParent">Handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows.</param>
            <param name="lpEnumFunc">Pointer to an application-defined callback function</param>
            <param name="lParam">Specifies an application-defined value to be passed to the callback function</param>
            <returns>Not used</returns>
        </member>
        <member name="M:Fluent.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            The SetParent function changes the parent window of the specified child window. 
            </summary>
            <param name="hWndChild">Handle to the child window</param>
            <param name="hWndNewParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window. Windows 2000/XP: If this parameter is HWND_MESSAGE, the child window becomes a message-only window. </param>
            <returns> the function succeeds, the return value is a handle to the previous parent window. If the function fails, the return value is NULL. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetWindowInfo(System.IntPtr,Fluent.NativeMethods.WINDOWINFO@)">
            <summary>
            The GetWindowInfo function retrieves information about the specified window.
            </summary>
            <param name="hwnd">Handle to the window whose information is to be retrieved. </param>
            <param name="pwi">Pointer to a WINDOWINFO structure to receive the information. Note that you must set WINDOWINFO.cbSize to sizeof(WINDOWINFO) before calling this function. </param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>        
        </member>
        <member name="M:Fluent.NativeMethods.GetClassLongPtr(System.IntPtr,System.Int32)">
            <summary>
            The GetClassLongPtr function retrieves the specified value from the WNDCLASSEX structure associated with the specified window.
            If you are retrieving a pointer or a handle, this function supersedes the GetClassLong function. (Pointers and handles are 32 bits on 32-bit Microsoft Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use GetClassLongPtr.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs. </param>
            <param name="nIndex">Specifies the value to retrieve. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the WNDCLASSEX structure, specify one of the following values. </param>
            <returns>If the function succeeds, the return value is the requested value.If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.LoadImage(System.IntPtr,System.IntPtr,System.UInt32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Loads an icon, cursor, animated cursor, or bitmap.
            </summary>
            <param name="hinst">Handle to the module of either a DLL or executable (.exe) that contains the image to be loaded</param>
            <param name="lpszName">Specifies the image to load</param>
            <param name="uType">Specifies the type of image to be loaded. </param>
            <param name="cxDesired">Specifies the width, in pixels, of the icon or cursor</param>
            <param name="cyDesired">Specifies the height, in pixels, of the icon or cursor</param>
            <param name="fuLoad">This parameter can be one or more of the following values.</param>
            <returns>If the function succeeds, the return value is the requested value.If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetWindowRect(System.IntPtr,Fluent.NativeMethods.Rect@)">
            <summary>
            The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen. 
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="lpRect">Pointer to a structure that receives the screen coordinates of the upper-left and lower-right corners of the window</param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetClientRect(System.IntPtr,Fluent.NativeMethods.Rect@)">
            <summary>
            The GetClientRect function retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0). 
            </summary>
            <param name="hWnd"> Handle to the window whose client coordinates are to be retrieved. </param>
            <param name="lpRect">Pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window. </param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.AdjustWindowRectEx(Fluent.NativeMethods.Rect@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            The AdjustWindowRectEx function calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size. 
            </summary>
            <param name="lpRect">Pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area. </param>
            <param name="dwStyle">Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">Specifies whether the window has a menu. </param>
            <param name="dwExStyle">Specifies the extended window style of the window whose required size is to be calculated. For more information, see CreateWindowEx.</param>
            <returns>If the function succeeds, the return value is nonzero.If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.ChooseColor(Fluent.NativeMethods.CHOOSECOLOR)">
            <summary>
            Creates a Color dialog box that enables the user to select a color.
            </summary>
            <param name="lpcc">A pointer to a CHOOSECOLOR structure that contains information used to initialize the dialog box. When ChooseColor returns, this structure contains information about the user's color selection.</param>
            <returns>If the user clicks the OK button of the dialog box, the return value is nonzero. The rgbResult member of the CHOOSECOLOR structure contains the RGB color value of the color selected by the user.If the user cancels or closes the Color dialog box or an error occurs, the return value is zero. </returns>
        </member>
        <member name="M:Fluent.NativeMethods.ToUnicodeEx(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            The ToUnicodeEx function translates the specified virtual-key 
            code and keyboard state to the corresponding 
            Unicode character or characters
            </summary>
            <returns>1, 2 or more if success, otherwise fail</returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status
             of the 256 virtual keys to the specified buffer. 
            </summary>
            <returns>If the function fails, the return value is zero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.MapVirtualKeyEx(System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The MapVirtualKeyEx function translates (maps) a virtual-key 
            code into a scan code or character value, or translates a scan 
            code into a virtual-key code. The function translates the codes 
            using the input language and an input locale identifier
            </summary>
            <returns>The return value is either a scan code, 
            a virtual-key code, or a character value, depending 
            on the value of uCode and uMapType. If there is no translation,
            the return value is zero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.LoadKeyboardLayout(System.String,System.UInt32)">
            <summary>
            The LoadKeyboardLayout function loads a new input locale identifier 
            (formerly called the keyboard layout) into the system. Several input
            locale identifiers can be loaded at a time, but only one per process 
            is active at a time. Loading multiple input locale identifiers makes 
            it possible to rapidly switch between them
            </summary>
            <returns>If the function succeeds, the return value is the input 
            locale identifier to the locale matched with the requested name. 
            If no matching locale is available, the return value is NULL</returns>
        </member>
        <member name="M:Fluent.NativeMethods.UnloadKeyboardLayout(System.IntPtr)">
            <summary>
            The UnloadKeyboardLayout function unloads an input locale identifier 
            (formerly called a keyboard layout). 
            </summary>
            <param name="hkl">Input locale identifier to unload</param>
            <returns>If the function succeeds, the return value is nonzero</returns>
        </member>
        <member name="M:Fluent.NativeMethods.GetKeyboardLayoutList(System.Int32,System.IntPtr[])">
            <summary>
            The GetKeyboardLayoutList function retrieves the input locale identifiers 
            (formerly called keyboard layout handles) corresponding to the current set 
            of input locales in the system. The function copies the 
            identifiers to the specified buffer.
            </summary>
            <param name="nBuff">Specifies the maximum number of handles that the buffer can hold</param>
            <param name="lpList">Pointer to the buffer that receives the array of input locale identifiers</param>
            <returns>If the function succeeds, the return value is the number of input locale 
            identifiers copied to the buffer or, if nBuff is zero, the return value is the size, 
            in array elements, of the buffer needed to receive all current input locale identifiers
            If the function fails, the return value is zero</returns>
        </member>
        <member name="T:Fluent.NativeMethods.CHOOSECOLOR">
            <summary>
            Contains information the ChooseColor function uses to initialize the Color dialog box. After the user closes the dialog box, the system returns information about the user's selection in this structure. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.lStructSize">
            <summary>
            The length, in bytes, of the structure. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.hwndOwner">
            <summary>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.hInstance">
            <summary>
            If the CC_ENABLETEMPLATEHANDLE flag is set in the Flags member, hInstance is a handle to a memory object containing a dialog box template. If the CC_ENABLETEMPLATE flag is set, hInstance is a handle to a module that contains a dialog box template named by the lpTemplateName member. If neither CC_ENABLETEMPLATEHANDLE nor CC_ENABLETEMPLATE is set, this member is ignored. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.rgbResult">
            <summary>
            If the CC_RGBINIT flag is set, rgbResult specifies the color initially selected when the dialog box is created. If the specified color value is not among the available colors, the system selects the nearest solid color available. If rgbResult is zero or CC_RGBINIT is not set, the initially selected color is black. If the user clicks the OK button, rgbResult specifies the user's color selection. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.lpCustColors">
            <summary>
            A pointer to an array of 16 values that contain red, green, blue (RGB) values for the custom color boxes in the dialog box. If the user modifies these colors, the system updates the array with the new RGB values. To preserve new custom colors between calls to the ChooseColor function, you should allocate static memory for the array. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.Flags">
            <summary>
            A set of bit flags that you can use to initialize the Color dialog box. When the dialog box returns, it sets these flags to indicate the user's input. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.lCustData">
            <summary>
            Application-defined data that the system passes to the hook procedure identified by the lpfnHook member. When the system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the CHOOSECOLOR structure specified when the dialog was created. The hook procedure can use this pointer to get the lCustData value. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.lpfnHook">
            <summary>
            A pointer to a CCHookProc hook procedure that can process messages intended for the dialog box. This member is ignored unless the CC_ENABLEHOOK flag is set in the Flags member. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.CHOOSECOLOR.lpTemplateName">
            <summary>
            The name of the dialog box template resource in the module identified by the hInstance member. This template is substituted for the standard dialog box template. For numbered dialog box resources, lpTemplateName can be a value returned by the MAKEINTRESOURCE macro. This member is ignored unless the CC_ENABLETEMPLATE flag is set in the Flags member. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.NCCALCSIZE_PARAMS">
            <summary>
            The NCCALCSIZE_PARAMS structure contains information that an application can use while processing the WM_NCCALCSIZE message to calculate the size, position, and valid contents of the client area of a window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.NCCALCSIZE_PARAMS.rect0">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.NCCALCSIZE_PARAMS.rect1">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.NCCALCSIZE_PARAMS.rect2">
            <summary>
            Specifies an array of rectangles. The meaning of the array of rectangles changes during the processing of the WM_NCALCSIZE message
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.NCCALCSIZE_PARAMS.lppos">
            <summary>
            Pointer to a WINDOWPOS structure that contains the size and position values specified in the operation that moved or resized the window. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.WINDOWPOS">
            <summary>
            The WINDOWPOS structure contains information about the size and position of a window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.hwnd">
            <summary>
            Identifies the window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.hwndInsertAfter">
            <summary>
            Identifies the window behind which this window is placed. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.x">
            <summary>
            Specifies the position of the left edge of the window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.y">
            <summary>
            Specifies the position of the right edge of the window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.cx">
            <summary>
            Specifies the window width, in pixels. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.cy">
            <summary>
            Specifies the window height, in pixels. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPOS.flags">
            <summary>
            Specifies window-positioning options. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.Rect">
            <summary>
            The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.Rect.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.Rect.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.Rect.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.Rect.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.MonitorInfo">
            <summary>
            The MONITORINFO structure contains information about a display monitor.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MonitorInfo.Size">
            <summary>
            The size of the structure, in bytes. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MonitorInfo.Monitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, expressed 
            in virtual-screen coordinates. 
            Note that if the monitor is not the primary display monitor, 
            some of the rectangle's coordinates may be negative values. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MonitorInfo.Work">
            <summary>
            A RECT structure that specifies the work area rectangle of the display monitor, 
            expressed in virtual-screen coordinates. Note that if the monitor is not the primary 
            display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MonitorInfo.Flags">
            <summary>
            A set of flags that represent attributes of the display monitor. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.MARGINS">
            <summary>
            Returned by the GetThemeMargins function to define the margins of windows that have visual styles applied. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MARGINS.cxLeftWidth">
            <summary>
            Width of the left border that retains its size.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MARGINS.cxRightWidth">
            <summary>
            Width of the right border that retains its size.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MARGINS.cyTopHeight">
            <summary>
            Height of the top border that retains its size.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MARGINS.cyBottomHeight">
            <summary>
            Height of the bottom border that retains its size.
            </summary>
        </member>
        <member name="M:Fluent.NativeMethods.MARGINS.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="left"> Width of the left border that retains its size.</param>
            <param name="top">Height of the top border that retains its size.</param>
            <param name="right">Width of the right border that retains its size.</param>
            <param name="bottom">Height of the bottom border that retains its size.</param>
        </member>
        <member name="T:Fluent.NativeMethods.POINT">
            <summary>
            The POINT structure defines the x- and y- coordinates of a point. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.POINT.x">
            <summary>
            Specifies the x-coordinate of the point. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.POINT.y">
            <summary>
            Specifies the y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.MINMAXINFO">
            <summary>
            The MINMAXINFO structure contains information about a window's maximized size 
            and position and its minimum and maximum tracking size. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MINMAXINFO.ptReserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MINMAXINFO.ptMaxSize">
            <summary>
            Specifies the maximized width (POINT.x) and the maximized height (POINT.y) of the window. 
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MINMAXINFO.ptMaxPosition">
            <summary>
            Specifies the position of the left side of the maximized window (POINT.x) and the
            position of the top of the maximized window (POINT.y). For top-level windows, this 
            value is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MINMAXINFO.ptMinTrackSize">
            <summary>
            Specifies the minimum tracking width (POINT.x) and the minimum tracking height 
            (POINT.y) of the window. This value can be obtained programmatically from the 
            system metrics SM_CXMINTRACK and SM_CYMINTRACK.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.MINMAXINFO.ptMaxTrackSize">
            <summary>
            Specifies the maximum tracking width (POINT.x) and the maximum tracking 
            height (POINT.y) of the window. This value is based on the size of the virtual 
            screen and can be obtained programmatically from the system 
            metrics SM_CXMAXTRACK and SM_CYMAXTRACK.
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.WINDOWINFO">
            <summary>
            The WINDOWINFO structure contains window information.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.cbSize">
            <summary>
            The size of the structure, in bytes. The caller must set this to sizeof(WINDOWINFO). 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.rcWindow">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the window. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.rcClient">
            <summary>
            Pointer to a RECT structure that specifies the coordinates of the client area
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.dwStyle">
            <summary>
            The window styles. For a table of window styles, see CreateWindowEx.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.dwExStyle">
            <summary>
            The extended window styles. For a table of extended window styles, see CreateWindowEx
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.dwWindowStatus">
            <summary>
            The window status. If this member is WS_ACTIVECAPTION, the window is active. Otherwise, this member is zero
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.cxWindowBorders">
            <summary>
            The width of the window border, in pixels.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.cyWindowBorders">
            <summary>
            The height of the window border, in pixels. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.atomWindowType">
            <summary>
            The window class atom (see RegisterClass). 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWINFO.wCreatorVersion">
            <summary>
            The Microsoft Windows version of the application that created the window. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.UNSIGNED_RATIO">
            <summary>
            A ratio used with the Desktop Window Manager (DWM) timing API.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.UNSIGNED_RATIO.uiNumerator">
            <summary>
            The ratio numerator.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.UNSIGNED_RATIO.uiDenominator">
            <summary>
            The ratio denominator
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.DWM_TIMING_INFO">
            <summary>
            Contains Desktop Window Manager (DWM) composition timing information.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cbSize">
            <summary>
            The size of this DWM_TIMING_INFO structure. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.rateRefresh">
            <summary>
            The monitor refresh rate
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcRefreshPeriod">
            <summary>
            The monitor refresh rate.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.rateCompose">
            <summary>
            The composition rate.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcVBlank">
            <summary>
            The query performance counter value before the vertical blank.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefresh">
            <summary>
            The DWM refresh counter.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cDXRefresh">
            <summary>
            The Microsoft DirectX refresh counter.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcCompose">
            <summary>
            The query performance counter value for a frame composition.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFrame">
            <summary>
            The frame number that was composed at qpcCompose. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cDXPresent">
            <summary>
            The DirectX present number used to identify rendering frames.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshFrame">
            <summary>
            The refresh count of the frame that was composed at qpcCompose. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFrameSubmitted">
            <summary>
            The DWM frame number that was last submitted.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cDXPresentSubmitted">
            <summary>
            The DirectX present number that was last submitted.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFrameConfirmed">
            <summary>
            The DWM frame number that was last confirmed as presented.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cDXPresentConfirmed">
            <summary>
            The DirectX present number that was last confirmed as presented.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshConfirmed">
            <summary>
            The target refresh count of the last frame confirmed completed by the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cDXRefreshConfirmed">
            <summary>
            The DirectX refresh count when the frame was confirmed as presented.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesLate">
            <summary>
            The number of frames the DWM presented late.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesOutstanding">
            <summary>
            The number of composition frames that have been issued but have not been confirmed as completed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFrameDisplayed">
            <summary>
            The last frame displayed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcFrameDisplayed">
            <summary>
            The query performance counter (QPC) time of the composition pass when the frame was displayed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshFrameDisplayed">
            <summary>
            The vertical refresh count when the frame should have become visible.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFrameComplete">
            <summary>
            The ID of the last frame marked complete.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcFrameComplete">
            <summary>
            /The QPC time when the last frame was marked as completed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramePending">
            <summary>
            The ID of the last frame marked as pending.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.qpcFramePending">
            <summary>
            The QPC time when the last frame was marked pending.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesDisplayed">
            <summary>
            The number of unique frames displayed. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesComplete">
            <summary>
            The number of new completed frames that have been received.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesPending">
            <summary>
            The number of new frames submitted to DirectX but not yet completed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesAvailable">
            <summary>
            The number of frames available but not displayed, used, or dropped. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesDropped">
            <summary>
            The number of rendered frames that were never displayed because composition occurred too late. This value is valid only after a second call to DwmGetCompositionTimingInfo. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cFramesMissed">
            <summary>
            The number of times an old frame was composed when a new frame should have been used but was not available.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshNextDisplayed">
            <summary>
            The frame count at which the next frame is scheduled to be displayed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshNextPresented">
            <summary>
            The frame count at which the next DirectX present is scheduled to be displayed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshesDisplayed">
            <summary>
            The total number of refreshes that have been displayed for the application since DwmSetPresentParameters was last called. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshesPresented">
            <summary>
            The total number of refreshes that have been presented by the application since DwmSetPresentParameters was last called. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cRefreshStarted">
            <summary>
            The refresh number when content for this window started to be displayed.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cPixelsReceived">
            <summary>
            The total number of pixels DirectX redirected to the DWM.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cPixelsDrawn">
            <summary>
            The number of pixels drawn.
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.DWM_TIMING_INFO.cBuffersEmpty">
            <summary>
            The number of empty buffers in the flip chain.
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.WINDOWPLACEMENT">
            <summary>
            The WINDOWPLACEMENT structure contains information about the placement of a window on the screen. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.length">
            <summary>
            Specifies the length, in bytes, of the structure. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof( WINDOWPLACEMENT). 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored. This member can be one or more of the following values. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.showCmd">
            <summary>
            Specifies the current show state of the window. This member can be one of the following values. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.ptMinPosition">
            <summary>
            Specifies the coordinates of the window's upper-left corner when the window is minimized. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.ptMaxPosition">
            <summary>
            Specifies the coordinates of the window's upper-left corner when the window is maximized. 
            </summary>
        </member>
        <member name="F:Fluent.NativeMethods.WINDOWPLACEMENT.rcNormalPosition">
            <summary>
            Specifies the window's coordinates when the window is in the restored position. 
            </summary>
        </member>
        <member name="T:Fluent.NativeMethods.EnumChildProc">
            <summary>
            The EnumChildProc function is an application-defined callback function used with the EnumChildWindows function. It receives the child window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a placeholder for the application-defined function name. 
            </summary>
            <param name="hwnd">Handle to a child window of the parent window specified in EnumChildWindows</param>
            <param name="lParam">Specifies the application-defined value given in EnumChildWindows</param>
            <returns>To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE</returns>
        </member>
        <member name="T:Fluent.DismissPopupMode">
            <summary>
            Dismiss popup mode
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupMode.Always">
            <summary>
            Always dismiss popup
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupMode.MouseNotOver">
            <summary>
            Dismiss only if mouse is not over popup
            </summary>
        </member>
        <member name="T:Fluent.DismissPopupEventHandler">
            <summary>
            Dismiss popup handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Fluent.DismissPopupEventArgs">
            <summary>
            Dismiss popup arguments
            </summary>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.#ctor(Fluent.DismissPopupMode)">
            <summary>
            Constructor
            </summary>
            <param name="dismissMode">Dismiss mode</param>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
            <summary>
            When overridden in a derived class, provides a way to invoke event handlers in a type-specific way, which can increase efficiency over the base implementation.
            </summary>
            <param name="genericHandler">The generic handler / delegate implementation to be invoked.</param><param name="genericTarget">The target on which the provided handler should be invoked.</param>
        </member>
        <member name="P:Fluent.DismissPopupEventArgs.DismissMode">
            <summary>
            Popup dismiss mode
            </summary>
        </member>
        <member name="T:Fluent.PopupService">
            <summary>
            Represent additional popup functionality
            </summary>
        </member>
        <member name="F:Fluent.PopupService.DismissPopupEvent">
            <summary>
            Occurs then popup is dismissed
            </summary>
        </member>
        <member name="M:Fluent.PopupService.RaiseDismissPopupEvent(System.Object,Fluent.DismissPopupMode)">
            <summary>
            Raises DismissPopup event
            </summary>
            <param name="sender"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Fluent.PopupService.Attach(System.Type)">
            <summary>
            Set needed parameters to control
            </summary>
            <param name="classType">Control type</param>
        </member>
        <member name="M:Fluent.PopupService.OnClickThroughThunk(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles PreviewMouseDownOutsideCapturedElementEvent event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.PopupService.OnLostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles lost mouse capture event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.PopupService.IsAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true whether parent is ancestor of element
            </summary>
            <param name="parent">Parent</param>
            <param name="element">Element</param>
            <returns>Returns true whether parent is ancestor of element</returns>
        </member>
        <member name="M:Fluent.PopupService.OnDismissPopup(System.Object,Fluent.DismissPopupEventArgs)">
            <summary>
            Handles dismiss popup event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.PopupService.IsMousePhysicallyOver(System.Windows.UIElement)">
            <summary>
            Returns true whether mouse is physically over the element 
            </summary>
            <param name="element">Element</param>
            <returns>Returns true whether mouse is physically over the element</returns>
        </member>
        <member name="M:Fluent.PopupService.OnContextMenuOpened(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Handles context menu opened event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Fluent.PopupService.OnContextMenuClosed(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Handles context menu closed event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Fluent.GalleryGroupContainer">
            <summary>
            Represents container of grouped gallery items in GalleryPanel or Gallery
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.IsHeaderedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsHeadered.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.ItemWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemWidth.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.ItemHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemHeight.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.MinItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsInRow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.MaxItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsInRow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.GalleryGroupContainer.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryGroupContainer.GetItemSize">
            <summary>
            Determinates item's size (return Size.Empty in case of it is not possible)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.GalleryGroupContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            <returns>The size of the control, up to the maximum specified by constraint.</returns>
            <param name="constraint">The maximum size that the method can return.</param>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.IsHeadered">
            <summary>
            Gets or sets whether the header must be shown. 
            When the property is false this control uses to show all items without grouping
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.Orientation">
            <summary>
            Gets or sets panel orientation
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of 
            all items that are contained within
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of 
            all items that are contained within
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.MinItemsInRow">
            <summary>
            Gets or sets minimum items quantity in row
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.MaxItemsInRow">
            <summary>
            Gets or sets maximum items quantity in row
            </summary>
        </member>
        <member name="T:Fluent.ObjectToImageConverter">
            <summary>
            Converts string or ImageSource to Image control
            </summary>
        </member>
        <member name="M:Fluent.ObjectToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Fluent.ObjectToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Fluent.KeyTip">
            <summary>
            Represents KeyTip control
            </summary>
        </member>
        <member name="F:Fluent.KeyTip.KeysProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetKeys(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets value of attached property Keys for the given element
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetKeys(System.Windows.DependencyObject)">
            <summary>
            Gets value of the attached property Keys of the given element
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="F:Fluent.KeyTip.AutoPlacementProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoPlacement.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetAutoPlacement(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether key tip placement is auto 
            or defined by alignment and margin properties
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetAutoPlacement(System.Windows.DependencyObject)">
            <summary>
            Gets whether key tip placement is auto 
            or defined by alignment and margin properties
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="F:Fluent.KeyTip.HorizontalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalAlignment.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetHorizontalAlignment(System.Windows.DependencyObject,System.Windows.HorizontalAlignment)">
            <summary>
            Sets Horizontal Alignment of the key tip
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetHorizontalAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets Horizontal alignment of the key tip
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="M:Fluent.KeyTip.GetVerticalAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets vertical alignment of the key tip
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="M:Fluent.KeyTip.SetVerticalAlignment(System.Windows.DependencyObject,System.Windows.VerticalAlignment)">
            <summary>
            Sets vertical alignment of the key tip
            </summary>
            <param name="obj">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="F:Fluent.KeyTip.VerticalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalAlignment.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.GetMargin(System.Windows.DependencyObject)">
            <summary>
            Gets margin of the key tip
            </summary>
            <param name="obj">The key tip</param>
            <returns>Margin</returns>
        </member>
        <member name="M:Fluent.KeyTip.SetMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets margin of the key tip
            </summary>
            <param name="obj">The key tip</param>
            <param name="value">Value</param>
        </member>
        <member name="F:Fluent.KeyTip.MarginProperty">
            <summary>
            Using a DependencyProperty as the backing store for Margin. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.#ctor">
            <summary>
            Default constrctor
            </summary>
        </member>
        <member name="T:Fluent.KeyTranslator">
            <summary>
            Helps to translate Key to Char 
            (with keyboard layouts support)
            </summary>
        </member>
        <member name="M:Fluent.KeyTranslator.KeyToChar(System.Windows.Input.Key,System.Globalization.CultureInfo)">
            <summary>
            Converts Key to Char (considering keyboard layout defined in the given culture)
            </summary>
            <param name="key">Key</param>
            <param name="cultureInfo">Culture</param>
            <returns>Char</returns>
        </member>
        <member name="T:Fluent.GrayscaleEffect">
            <summary>
            An effect that turns the input into shades of a single color.
            </summary>
        </member>
        <member name="F:Fluent.GrayscaleEffect.InputProperty">
            <summary>
            Dependency property for Input
            </summary>
        </member>
        <member name="F:Fluent.GrayscaleEffect.FilterColorProperty">
            <summary>
            Dependency property for FilterColor
            </summary>
        </member>
        <member name="M:Fluent.GrayscaleEffect.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.GrayscaleEffect.Input">
            <summary>
            Impicit input
            </summary>
        </member>
        <member name="P:Fluent.GrayscaleEffect.FilterColor">
            <summary>
            The color used to tint the input.
            </summary>
        </member>
        <member name="T:Fluent.RibbonMenu">
            <summary>
            Represents menu in combo box and gallery
            </summary>
        </member>
        <member name="M:Fluent.RibbonMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonMenu.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.RibbonMenu.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonMenu.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Fluent.GalleryPanel">
            <summary>
            Represents panel for Gallery, InRibbonGallery, ComboBox 
            with grouping and filtering capabilities
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.IsGroupedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsGrouped. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.GroupByProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupBy.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemContainerGeneratorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemContainerGenerator.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.GroupStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupHeaderStyle.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemWidth.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemHeight.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.FilterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Filter. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.MinItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsInRow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.MaxItemsInRowProperty">
            <summary>
            Using a DependencyProperty as the backing store for ItemsInRow. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.GetVisualChild(System.Int32)">
            <summary>
            Overrides System.Windows.Media.Visual.GetVisualChild(System.Int32),
            and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested 
            child element in the collection</param>
            <returns>The requested child element. This should not return null; 
            if the provided index is out of range, an exception is thrown</returns>
        </member>
        <member name="M:Fluent.GalleryPanel.GetActualMinWidth(System.Int32)">
            <summary>
            Gets actual min width of the gallery panel (based on MinItemsInRow)
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.GetItemSize">
            <summary>
            Determinates item's size (return Size.Empty in case of it is not possible)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.GalleryPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when the VisualCollection of a visual object is modified.
            </summary>
            <param name="visualAdded">The Visual that was added to the collection.</param>
            <param name="visualRemoved">The Visual that was removed from the collection.</param>
        </member>
        <member name="M:Fluent.GalleryPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in 
            layout required for child elements and determines a size 
            for the derived class. 
            </summary>
            <returns>
            The size that this element determines it needs during layout, 
            based on its calculations of child element sizes.
            </returns>
            <param name="availableSize">The available size that this element can give 
            to child elements. Infinity can be specified as a value to indicate that
            the element will size to whatever content is available.</param>
        </member>
        <member name="M:Fluent.GalleryPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements 
            and determines a size for a derived class. 
            </summary>
            <returns> The actual size used. </returns>
            <param name="finalSize">The final area within the parent that this 
            element should use to arrange itself and its children.</param>
        </member>
        <member name="P:Fluent.GalleryPanel.IsGrouped">
            <summary>
            Gets or sets whether gallery panel shows groups 
            (Filter property still works as usual)
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.GroupBy">
            <summary>
            Gets or sets property name to group items
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.GroupByAdvanced">
            <summary>
            Gets or sets custom user method to group items. 
            If this property is not null, GroupBy property is ignored
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.Orientation">
            <summary>
            Gets or sets panel orientation
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemContainerGenerator">
            <summary>
            Gets or sets ItemContainerGenerator which generates the 
            user interface (UI) on behalf of its host, such as an  ItemsControl. 
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.GroupStyle">
            <summary>
            Gets or sets group style
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of 
            all items that are contained within
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of 
            all items that are contained within
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.Filter">
            <summary>
            Gets or sets groups names separated by comma which must be shown
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.MinItemsInRow">
            <summary>
            Gets or sets maximum items quantity in row
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.MaxItemsInRow">
            <summary>
            Gets or sets maximum items quantity in row
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
        </member>
        <member name="T:Fluent.ContextMenuService">
            <summary>
            Represents additional context menu service
            </summary>
        </member>
        <member name="M:Fluent.ContextMenuService.Attach(System.Type)">
            <summary>
            Attach needed parameters to control
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Fluent.ContextMenuService.Coerce(System.Windows.DependencyObject)">
            <summary>
            Coerce control context menu
            </summary>
            <param name="o">Control</param>
        </member>
        <member name="T:Fluent.RibbonContextualGroupsContainer">
            <summary>
            Represents contextual groups container
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualGroupsContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for
            a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should 
            use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Fluent.RibbonContextualGroupsContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for 
            child elements and determines a size for the System.Windows.FrameworkElement-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. 
            Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="T:Fluent.RibbonToolBarControlDefinition">
            <summary>
            Represent logical definition for a control in toolbar
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.TargetProperty">
            <summary>
            Using a DependencyProperty as the backing store for ControlName.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.WidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for Width. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Target">
            <summary>
            Gets or sets name of the target control
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Width">
            <summary>
            Gets or sets width of the target control
            </summary>
        </member>
        <member name="E:Fluent.RibbonToolBarControlDefinition.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Fluent.RibbonGroupBoxState">
            <summary>
            Represents states of ribbon group 
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Large">
            <summary>
            Large. All controls in the group will try to be large size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Middle">
            <summary>
            Middle. All controls in the group will try to be middle size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Small">
            <summary>
            Small. All controls in the group will try to be small size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Collapsed">
            <summary>
            Collapsed. Group will collapse its content in a single button
            </summary>
        </member>
        <member name="T:Fluent.RibbonGroupBox">
            <summary>
            RibbonGroup represents a logical group of controls as they appear on
            a RibbonTab.  These groups can resize its content
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.StateProperty">
            <summary>
            Using a DependencyProperty as the backing store for State.  
            This enables animation, styling, binding, etc...
            </summary> 
        </member>
        <member name="M:Fluent.RibbonGroupBox.StatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On state property changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="F:Fluent.RibbonGroupBox.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsLauncherVisibleProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsLauncherVisible.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.DialogLauncherButtonKeyTipKeysProperty">
            <summary>
            Using a DependencyProperty as the backing store for 
            LauncherKeys.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for LauncherIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for LauncherIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandParameterProperty">
            <summary>
            Identifies the System.Windows.Controls.Primitives.ButtonBase.CommandParameter dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandProperty">
            <summary>
            Identifies the routed System.Windows.Controls.Primitives.ButtonBase.Command dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandTargetProperty">
            <summary>
            Identifies the System.Windows.Controls.Primitives.ButtonBase.CommandTarget dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherToolTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for LauncherToolTip.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsLauncherEnabledProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsLauncherEnabled.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherButtonProperty">
            <summary>
            Using a DependencyProperty as the backing store for LauncherButton.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsDropDownOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsOpen.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Click event handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.GetPanel">
            <summary>
            Gets a panel with items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonGroupBox.GetLayoutRoot">
            <summary>
            Gets cmmon layout root for popup and groupbox
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonGroupBox.ClearCache">
            <summary>
            Clears cache
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.InvalidateLayout">
            <summary>
            Invalidates layout (with children)
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the System.Windows.Controls.ItemsControl.Items property changes.
            </summary>
            <param name="e">Information about the change.</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code 
            or internal processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDownï¿½routed 
            event reaches an element in its route that is derived from this class. 
            Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnDialogLauncherButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Dialog launcher button click handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">the event data</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnIsOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles IsOpen propertyu changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.RibbonGroupBox.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.State">
            <summary>
            Gets or sets the current state of the group
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.Scale">
            <summary>
            Gets or sets scale index (for internal IRibbonScalableControl)
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.SuppressCacheReseting">
            <summary>
            Gets or sets whether to reset cache when scalable control is scaled
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.Header">
            <summary>
            Gets or sets group box header
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsLauncherVisible">
            <summary>
            Gets or sets dialog launcher button visibility
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherKeys">
            <summary>
            Gets or sets key tip for dialog launcher button
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherIcon">
            <summary>
            Gets or sets launcher button icon
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherText">
            <summary>
            Gets or sets launcher button text
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommand">
            <summary>
            Gets or sets the command to invoke when this button is pressed. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommandParameter">
            <summary>
            Gets or sets the parameter to pass to the System.Windows.Controls.Primitives.ButtonBase.Command property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherToolTip">
            <summary>
            Gets or sets launcher button tooltip
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsLauncherEnabled">
            <summary>
            Gets or sets whether launcher button is enabled
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherButton">
            <summary>
            Gets launcher button
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsDropDownOpen">
            <summary>
            Gets or sets drop down popup visibility
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LogicalChildren">
            <summary>
            Gets an enumerator for the logical child objects of 
            the System.Windows.Controls.ItemsControl object.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.Icon">
            <summary>
            Gets or sets icon
            </summary>
        </member>
        <member name="E:Fluent.RibbonGroupBox.LauncherClick">
            <summary>
            Dialog launcher btton click event
            </summary>
        </member>
        <member name="E:Fluent.RibbonGroupBox.DropDownOpened">
            <summary>
            Occurs when context menu is opened
            </summary>
        </member>
        <member name="E:Fluent.RibbonGroupBox.DropDownClosed">
            <summary>
            Occurs when context menu is closed
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsSnapped">
            <summary>
            Snaps / Unsnaps the Visual 
            (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.StateIntermediate">
            <summary>
            Gets or sets intermediate state of the group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.ScaleIntermediate">
            <summary>
            Gets or sets intermediate scale of the group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.DesiredSizeIntermediate">
            <summary>
            Gets intermediate desired size
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.RibbonTitleBar">
            <summary>
            Represents title bar
            </summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.QuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for QuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.HeaderAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HeaderAlignment.  This enables animation, styling, binding, etc...
            </summary> 
        </member>
        <member name="M:Fluent.RibbonTitleBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Fluent.RibbonTitleBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item"> The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="M:Fluent.RibbonTitleBar.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes 
            call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>The size of the control, up to the maximum specified by constraint.</returns>
        </member>
        <member name="M:Fluent.RibbonTitleBar.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of a System.Windows.Controls.Control object.
            </summary>
            <param name="arrangeBounds">The computed size that is used to arrange the content.</param>
            <returns>The size of the control.</returns>
        </member>
        <member name="P:Fluent.RibbonTitleBar.QuickAccessToolBar">
            <summary>
            Gets or sets quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.RibbonTitleBar.HeaderAlignment">
            <summary>
            Gets or sets header alignment
            </summary>
        </member>
        <member name="M:Fluent.DpiHelper.LogicalPixelsToDevice(System.Windows.Point)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Fluent.DpiHelper.DevicePixelsToLogical(System.Windows.Point)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <param name="devicePoint">A point in the physical coordinate system.</param>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Fluent.RibbonWindow">
            <summary>
            Represents basic window for ribbon
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.Epsilon">
            <summary>
            Epsilon - more or less random, more or less small number.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.HitTestBorders">
            <summary>
            Matrix of the hit test values to return when responding to NC window messages.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.ResizeBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for ResizeBorderTickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.GlassBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for GlassBorderThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.CaptionHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for CaptionHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.CornerRadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for CornerRadius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsDwmEnabledProperty">
            <summary>
            Is DWM Enabled Dependency property
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsIconVisibleProperty">
            <summary>
            Gets or sets whether icon is visible
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsCollapsedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsCollapsed.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsNonClientAreaActiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsNcActivated.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.MinimizeCommand">
            <summary>
            Minimize command
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.MaximizeCommand">
            <summary>
            Maximize command
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.NormalizeCommand">
            <summary>
            Normalize command
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.CloseCommand">
            <summary>
            Close command
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Fluent.RibbonWindow.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.ModifyStyle(System.Int32,System.Int32)">
            <summary>Add and remove a native WindowStyle from the HWND.</summary>
            <param name="removeStyle">The styles to be removed.  These can be bitwise combined.</param>
            <param name="addStyle">The styles to be added.  These can be bitwise combined.</param>
            <returns>Whether the styles of the HWND were modified as a result of this call.</returns>
        </member>
        <member name="M:Fluent.RibbonWindow.ShowSystemMenu(System.Windows.Point)">
            <summary>Display the system menu at a specified location.</summary>
            <param name="screenLocation">The location to display the system menu, in logical screen coordinates.</param>
        </member>
        <member name="M:Fluent.RibbonWindow.GetHwndState">
            <summary>
            Get the WindowState as the native HWND knows it to be.  This isn't necessarily the same as what Window thinks.
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.UpdateSystemMenu(System.Nullable{System.Windows.WindowState})">
            <summary>
            Update the items in the system menu based on the current, or assumed, WindowState.
            </summary>
            <param name="assumeState">
            The state to assume that the Window is in.  This can be null to query the Window's state.
            </param>
            <remarks>
            We want to update the menu while we have some control over whether the caption will be repainted.
            </remarks>
        </member>
        <member name="M:Fluent.RibbonWindow.AreClose(System.Double,System.Double)">
            <summary>
            AreClose returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false. 
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the AreClose comparision.</returns>
        </member>
        <member name="P:Fluent.RibbonWindow.ResizeBorderThickness">
            <summary>
            Gets or sets resize border thickness
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.GlassBorderThickness">
            <summary>
            Gets or sets glass border thickness
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.CaptionHeight">
            <summary>
            Gets or sets caption height
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.CornerRadius">
            <summary>
            Gets or sets corner radius 
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsDwmEnabled">
            <summary>
            Is DWM Enabled
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsIconVisible">
            <summary>
            Gets or sets whether icon is visible
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsCollapsed">
            <summary>
            Gets whether window is collapsed
            </summary>              
        </member>
        <member name="P:Fluent.RibbonWindow.IsNonClientAreaActive">
            <summary>
            Gets whether client window area is activated
            </summary>
        </member>
        <member name="T:Fluent.StatusBarPanel">
            <summary>
            Represents panel for status bar
            </summary>
        </member>
        <member name="M:Fluent.StatusBarPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class. 
            </summary>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
        </member>
        <member name="M:Fluent.StatusBarPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class. 
            </summary>
            <returns>
            The actual size used.
            </returns>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        </member>
        <member name="T:Fluent.CheckBox">
            <summary>
            Represents Fluent UI specific CheckBox
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.CheckBox.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.LargeIcon">
            <summary>
            Gets or sets button large icon
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.ToggleButton">
            <summary>
            Represents toggle button
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.GroupNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for GroupName.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.IconProperty">
            <summary>
            Using a DependencyProperty as the backing store for Icon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.LargeIconProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmallIcon. 
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.IsDefinitiveProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsDefinitive.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button"/> is clicked. 
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original 
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="F:Fluent.ToggleButton.CanAddToQuickAccessToolBarProperty">
            <summary>
            Using a DependencyProperty as the backing store for CanAddToQuickAccessToolBar.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.QuickAccessElementStyleProperty">
            <summary>
             Using a DependencyProperty as the backing store for QuickAccessElementStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.GroupName">
            <summary>
            Gets or sets the name of the group that the toggle button belongs to. 
            Use the GroupName property to specify a grouping of toggle buttons to 
            create a mutually exclusive set of controls. You can use the GroupName 
            property when only one selection is possible from a list of available 
            options. When this property is set, only one ToggleButton in the specified
            group can be selected at a time.
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.Header">
            <summary>
            Gets or sets element Text
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.LargeIcon">
            <summary>
            Gets or sets button large icon
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.QuickAccessElementStyle">
            <summary>
            Gets or sets style of element on quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.SeparatorTabItem">
            <summary>
            Represents separator to use in the TabControl
            </summary>
        </member>
        <member name="M:Fluent.SeparatorTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="T:Fluent.RibbonContextualTabGroup">
            <summary>
            Represents contextual tab group
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.HeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for Header.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnHeaderChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles header chages
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.IndentExtenderProperty">
            <summary>
            Using a DependencyProperty as the backing store for RightOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.IsWindowMaximizedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsWindowMaximized.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles visibility prioperty changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.AppendTabItem(Fluent.RibbonTabItem)">
            <summary>
            Appends tab item
            </summary>
            <param name="item">Ribbon tab item</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.RemoveTabItem(Fluent.RibbonTabItem)">
            <summary>
            Removes tab item
            </summary>
            <param name="item">Ribbon tab item</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUpï¿½routed event 
            reaches an element in its route that is derived from this class. Implement this method to 
            add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
            The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the MouseDoubleClick routed event
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.Header">
            <summary>
            Gets or sets group header
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.IndentExtender">
            <summary>
            Gets or space whitespace extender
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.Items">
            <summary>
            Gets collection of tab items
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.IsWindowMaximized">
            <summary>
            Gets or sets a value indicating whether parent window is maximized
            </summary>
        </member>
        <member name="T:Fluent.TwoLineLabel">
            <summary>
            Represents specific label to use in particular ribbon controls
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.textRun">
            <summary>
            Run with text
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.HasTwoLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasTwoLines.  
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnHasTwoLinesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles HasTwoLines property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="F:Fluent.TwoLineLabel.HasGlyphProperty">
            <summary>
            Using a DependencyProperty as the backing store for HasGlyph.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnHasGlyphChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles HasGlyph property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="F:Fluent.TwoLineLabel.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal 
            processes call System.Windows.FrameworkElement.ApplyTemplate().
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles text property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.TwoLineLabel.UpdateTextRun">
            <summary>
            Updates text run adds newline if HasTwoLines == true
            </summary>
        </member>
        <member name="P:Fluent.TwoLineLabel.HasTwoLines">
            <summary>
            Gets or sets whether label must have two lines
            </summary>
        </member>
        <member name="P:Fluent.TwoLineLabel.HasGlyph">
            <summary>
            Gets or sets whether label has glyph
            </summary>
        </member>
        <member name="P:Fluent.TwoLineLabel.Text">
            <summary>
            Gets or sets labels text
            </summary>
        </member>
        <member name="T:Fluent.IconConverter">
            <summary>
            Icon converter provides default icon if user-defined is not present
            </summary>
        </member>
        <member name="M:Fluent.IconConverter.GetThumbnail(System.Windows.Media.Imaging.BitmapFrame)">
            <summary>
            ThumbnailExceptionWorkArround when image cause a format exception by accessing the Thumbnail
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="T:Fluent.StatusBarMenuItem">
            <summary>
            Represents menu item in ribbon status bar menu
            </summary>
        </member>
        <member name="F:Fluent.StatusBarMenuItem.StatusBarItemProperty">
            <summary>
            Using a DependencyProperty as the backing store for StatusBarItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.StatusBarMenuItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBarMenuItem.#ctor(Fluent.StatusBarItem)">
            <summary>
            Default constructor
            </summary>
            <param name="item">Ribbon Status Bar menu item</param>
        </member>
        <member name="P:Fluent.StatusBarMenuItem.StatusBarItem">
            <summary>
            Gets or sets Ribbon Status Bar menu item
            </summary>
        </member>
    </members>
</doc>
